// Generated by Haxe 4.0.0-rc.2+77068e1
#ifndef INCLUDED_fiesta_native_sdl_SDLApplication
#define INCLUDED_fiesta_native_sdl_SDLApplication

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_92958f0660df95c6
#define INCLUDED_92958f0660df95c6
#include "linc_sdl.h"
#endif
HX_DECLARE_CLASS3(fiesta,app,events,ApplicationEvent)
HX_DECLARE_CLASS3(fiesta,graphics,events,RenderEvent)
HX_DECLARE_CLASS3(fiesta,native,sdl,SDLApplication)
HX_DECLARE_CLASS3(fiesta,ui,events,ClipboardEvent)
HX_DECLARE_CLASS3(fiesta,ui,events,DropEvent)
HX_DECLARE_CLASS3(fiesta,ui,events,GamepadEvent)
HX_DECLARE_CLASS3(fiesta,ui,events,JoystickEvent)
HX_DECLARE_CLASS3(fiesta,ui,events,KeyEvent)
HX_DECLARE_CLASS3(fiesta,ui,events,MouseEvent)
HX_DECLARE_CLASS3(fiesta,ui,events,SensorEvent)
HX_DECLARE_CLASS3(fiesta,ui,events,TextEvent)
HX_DECLARE_CLASS3(fiesta,ui,events,WindowEvent)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)


    #include <CoreFoundation/CoreFoundation.h>
    #ifdef ANDROID
    int SDL_main (int argc, char *argv[]) { return 0; }
    #endif

namespace fiesta{
namespace native{
namespace sdl{


class HXCPP_CLASS_ATTRIBUTES SDLApplication_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef SDLApplication_obj OBJ_;
		SDLApplication_obj();

	public:
		enum { _hx_ClassId = 0x1e80f2b7 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="fiesta.native.sdl.SDLApplication")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"fiesta.native.sdl.SDLApplication"); }
		static hx::ObjectPtr< SDLApplication_obj > __new();
		static hx::ObjectPtr< SDLApplication_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~SDLApplication_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("SDLApplication",75,2c,99,38); }

		static  ::Dynamic callback;
		static Dynamic callback_dyn() { return callback;}
		static  ::fiesta::native::sdl::SDLApplication currentApplication;
		static bool active;
		 ::haxe::ds::IntMap gamepadsAxisMap;
		bool inBackground;
		Float framePeriod;
		int currentUpdate;
		int lastUpdate;
		int nextUpdate;
		 ::fiesta::ui::events::JoystickEvent joystickEvent;
		 ::fiesta::ui::events::KeyEvent keyEvent;
		 ::fiesta::ui::events::MouseEvent mouseEvent;
		 ::fiesta::ui::events::SensorEvent sensorEvent;
		 ::fiesta::ui::events::TextEvent textEvent;
		 ::fiesta::ui::events::WindowEvent windowEvent;
		 ::fiesta::app::events::ApplicationEvent applicationEvent;
		 ::fiesta::graphics::events::RenderEvent renderEvent;
		 ::fiesta::ui::events::ClipboardEvent clipboardEvent;
		 ::fiesta::ui::events::DropEvent dropEvent;
		 ::fiesta::ui::events::GamepadEvent gamepadEvent;
		int analogAxisDeadZone;
		int exec();
		::Dynamic exec_dyn();

		void handleEvent( SDL_Event event);
		::Dynamic handleEvent_dyn();

		void init();
		::Dynamic init_dyn();

		void processJoystickEvent( SDL_Event event);
		::Dynamic processJoystickEvent_dyn();

		void processKeyEvent( SDL_Event event);
		::Dynamic processKeyEvent_dyn();

		void processMouseEvent( SDL_Event event);
		::Dynamic processMouseEvent_dyn();

		void processSensorEvent( SDL_Event event);
		::Dynamic processSensorEvent_dyn();

		void processTextEvent( SDL_Event event);
		::Dynamic processTextEvent_dyn();

		void processWindowEvent( SDL_Event event);
		::Dynamic processWindowEvent_dyn();

		void processClipboardEvent( SDL_Event event);
		::Dynamic processClipboardEvent_dyn();

		void processDropEvent( SDL_Event event);
		::Dynamic processDropEvent_dyn();

		void processGamepadEvent( SDL_Event event);
		::Dynamic processGamepadEvent_dyn();

		int quit();
		::Dynamic quit_dyn();

		void registerWindow(::cpp::Pointer<  SDL_Window > window);
		::Dynamic registerWindow_dyn();

		void setFrameRate(Float frameRate);
		::Dynamic setFrameRate_dyn();

		int timerID;
		bool timerActive;
		bool firstTime;
		int onTimer(int interval, ::Dynamic v);
		::Dynamic onTimer_dyn();

		bool update();
		::Dynamic update_dyn();

		void updateFrame();
		::Dynamic updateFrame_dyn();

		int waitEvent( SDL_Event event);
		::Dynamic waitEvent_dyn();

		 ::fiesta::native::sdl::SDLApplication createApplication();
		::Dynamic createApplication_dyn();

};

} // end namespace fiesta
} // end namespace native
} // end namespace sdl

#endif /* INCLUDED_fiesta_native_sdl_SDLApplication */ 
