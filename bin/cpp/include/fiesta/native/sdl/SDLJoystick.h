// Generated by Haxe 4.0.0-rc.2+77068e1
#ifndef INCLUDED_fiesta_native_sdl_SDLJoystick
#define INCLUDED_fiesta_native_sdl_SDLJoystick

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_92958f0660df95c6
#define INCLUDED_92958f0660df95c6
#include "linc_sdl.h"
#endif
HX_DECLARE_CLASS3(fiesta,native,sdl,SDLJoystick)
HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,IntMap)


    #include <map>

namespace fiesta{
namespace native{
namespace sdl{


class HXCPP_CLASS_ATTRIBUTES SDLJoystick_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef SDLJoystick_obj OBJ_;
		SDLJoystick_obj();

	public:
		enum { _hx_ClassId = 0x6a1e02f5 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="fiesta.native.sdl.SDLJoystick")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"fiesta.native.sdl.SDLJoystick"); }

		hx::ObjectPtr< SDLJoystick_obj > __new() {
			hx::ObjectPtr< SDLJoystick_obj > __this = new SDLJoystick_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< SDLJoystick_obj > __alloc(hx::Ctx *_hx_ctx) {
			SDLJoystick_obj *__this = (SDLJoystick_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SDLJoystick_obj), false, "fiesta.native.sdl.SDLJoystick"));
			*(void **)__this = SDLJoystick_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~SDLJoystick_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("SDLJoystick",77,66,33,f1); }

		static void __boot();
		static ::cpp::Pointer<  SDL_Joystick > accelerometer;
		static int accelerometerID;
		static  ::haxe::ds::IntMap joystickIDs;
		static ::cpp::Pointer<  SDL_Joystick > getJoystick(int deviceID);
		static ::Dynamic getJoystick_dyn();

		static void setJoystick(int deviceID,::cpp::Pointer<  SDL_Joystick > joystick);
		static ::Dynamic setJoystick_dyn();

		static bool connect(int deviceID);
		static ::Dynamic connect_dyn();

		static bool disconnect(int id);
		static ::Dynamic disconnect_dyn();

		static int getInstanceID(int deviceID);
		static ::Dynamic getInstanceID_dyn();

		static void init();
		static ::Dynamic init_dyn();

		static bool isAccelerometer(int id);
		static ::Dynamic isAccelerometer_dyn();

		static const char* getDeviceGUID(int id);

		static ::String getDeviceName(int id);
		static ::Dynamic getDeviceName_dyn();

		static int getNumAxes(int id);
		static ::Dynamic getNumAxes_dyn();

		static int getNumButtons(int id);
		static ::Dynamic getNumButtons_dyn();

		static int getNumTrackBalls(int id);
		static ::Dynamic getNumTrackBalls_dyn();

};

} // end namespace fiesta
} // end namespace native
} // end namespace sdl

#endif /* INCLUDED_fiesta_native_sdl_SDLJoystick */ 
