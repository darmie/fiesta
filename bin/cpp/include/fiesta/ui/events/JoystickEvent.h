// Generated by Haxe 4.0.0-rc.2+77068e1
#ifndef INCLUDED_fiesta_ui_events_JoystickEvent
#define INCLUDED_fiesta_ui_events_JoystickEvent

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS3(fiesta,ui,events,JoystickEvent)
HX_DECLARE_CLASS3(fiesta,ui,events,JoystickEventType)

namespace fiesta{
namespace ui{
namespace events{


class HXCPP_CLASS_ATTRIBUTES JoystickEvent_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef JoystickEvent_obj OBJ_;
		JoystickEvent_obj();

	public:
		enum { _hx_ClassId = 0x092ac3a3 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="fiesta.ui.events.JoystickEvent")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"fiesta.ui.events.JoystickEvent"); }
		static hx::ObjectPtr< JoystickEvent_obj > __new();
		static hx::ObjectPtr< JoystickEvent_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~JoystickEvent_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("JoystickEvent",9e,7d,3c,e7); }

		static  ::Dynamic callback;
		static Dynamic callback_dyn() { return callback;}
		static  ::fiesta::ui::events::JoystickEvent eventObject;
		static void dispatch( ::fiesta::ui::events::JoystickEvent event);
		static ::Dynamic dispatch_dyn();

		 ::fiesta::ui::events::JoystickEventType eventType;
		int eventValue;
		int index;
		Float x;
		Float y;
		int id;
};

} // end namespace fiesta
} // end namespace ui
} // end namespace events

#endif /* INCLUDED_fiesta_ui_events_JoystickEvent */ 
