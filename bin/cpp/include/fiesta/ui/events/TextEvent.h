// Generated by Haxe 4.0.0-rc.2+77068e1
#ifndef INCLUDED_fiesta_ui_events_TextEvent
#define INCLUDED_fiesta_ui_events_TextEvent

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_STACK_FRAME(_hx_pos_1f5df64bfc76bf38_20_new)
HX_DECLARE_CLASS3(fiesta,ui,events,TextEvent)
HX_DECLARE_CLASS3(fiesta,ui,events,TextEventType)

namespace fiesta{
namespace ui{
namespace events{


class HXCPP_CLASS_ATTRIBUTES TextEvent_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef TextEvent_obj OBJ_;
		TextEvent_obj();

	public:
		enum { _hx_ClassId = 0x086cd792 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="fiesta.ui.events.TextEvent")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"fiesta.ui.events.TextEvent"); }

		hx::ObjectPtr< TextEvent_obj > __new() {
			hx::ObjectPtr< TextEvent_obj > __this = new TextEvent_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< TextEvent_obj > __alloc(hx::Ctx *_hx_ctx) {
			TextEvent_obj *__this = (TextEvent_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(TextEvent_obj), true, "fiesta.ui.events.TextEvent"));
			*(void **)__this = TextEvent_obj::_hx_vtable;
{
            	HX_STACKFRAME(&_hx_pos_1f5df64bfc76bf38_20_new)
HXLINE(  21)		( ( ::fiesta::ui::events::TextEvent)(__this) )->length = 0;
HXLINE(  22)		( ( ::fiesta::ui::events::TextEvent)(__this) )->start = 0;
HXLINE(  23)		const char* this1 = HX_("",00,00,00,00).__s;
HXDLIN(  23)		( ( ::fiesta::ui::events::TextEvent)(__this) )->text = this1;
HXLINE(  24)		( ( ::fiesta::ui::events::TextEvent)(__this) )->windowID = 0;
            	}
		
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~TextEvent_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("TextEvent",0d,38,85,b0); }

		static  ::fiesta::ui::events::TextEvent eventObject;
		static  ::Dynamic callback;
		static Dynamic callback_dyn() { return callback;}
		static void dispatch( ::fiesta::ui::events::TextEvent event);
		static ::Dynamic dispatch_dyn();

		int id;
		int windowID;
		int start;
		int length;
		 ::fiesta::ui::events::TextEventType eventType;
		const char* text;
};

} // end namespace fiesta
} // end namespace ui
} // end namespace events

#endif /* INCLUDED_fiesta_ui_events_TextEvent */ 
