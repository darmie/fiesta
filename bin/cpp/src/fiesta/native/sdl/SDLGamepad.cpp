// Generated by Haxe 4.0.0-rc.2+77068e1
#include <hxcpp.h>

#ifndef INCLUDED_92958f0660df95c6
#define INCLUDED_92958f0660df95c6
#include "linc_sdl.h"
#endif
#ifndef INCLUDED_fiesta_native_sdl_SDLGamepad
#include <fiesta/native/sdl/SDLGamepad.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_553d984fb220651d_23_getGameController,"fiesta.native.sdl.SDLGamepad","getGameController",0x05d1c536,"fiesta.native.sdl.SDLGamepad.getGameController","fiesta/native/sdl/SDLGamepad.hx",23,0xf691b13d)
HX_LOCAL_STACK_FRAME(_hx_pos_553d984fb220651d_29_setGameController,"fiesta.native.sdl.SDLGamepad","setGameController",0x293f9d42,"fiesta.native.sdl.SDLGamepad.setGameController","fiesta/native/sdl/SDLGamepad.hx",29,0xf691b13d)
HX_LOCAL_STACK_FRAME(_hx_pos_553d984fb220651d_35_connect,"fiesta.native.sdl.SDLGamepad","connect",0x88e8443c,"fiesta.native.sdl.SDLGamepad.connect","fiesta/native/sdl/SDLGamepad.hx",35,0xf691b13d)
HX_LOCAL_STACK_FRAME(_hx_pos_553d984fb220651d_53_disconnect,"fiesta.native.sdl.SDLGamepad","disconnect",0x86c4db4a,"fiesta.native.sdl.SDLGamepad.disconnect","fiesta/native/sdl/SDLGamepad.hx",53,0xf691b13d)
HX_LOCAL_STACK_FRAME(_hx_pos_553d984fb220651d_67_getInstanceID,"fiesta.native.sdl.SDLGamepad","getInstanceID",0xb7889cb8,"fiesta.native.sdl.SDLGamepad.getInstanceID","fiesta/native/sdl/SDLGamepad.hx",67,0xf691b13d)
HX_LOCAL_STACK_FRAME(_hx_pos_553d984fb220651d_72_getDeviceGUID,"fiesta.native.sdl.SDLGamepad","getDeviceGUID",0xf9503327,"fiesta.native.sdl.SDLGamepad.getDeviceGUID","fiesta/native/sdl/SDLGamepad.hx",72,0xf691b13d)
HX_LOCAL_STACK_FRAME(_hx_pos_553d984fb220651d_87_getDeviceName,"fiesta.native.sdl.SDLGamepad","getDeviceName",0xfdf9ec09,"fiesta.native.sdl.SDLGamepad.getDeviceName","fiesta/native/sdl/SDLGamepad.hx",87,0xf691b13d)
HX_LOCAL_STACK_FRAME(_hx_pos_553d984fb220651d_15_boot,"fiesta.native.sdl.SDLGamepad","boot",0x0c2ef4a0,"fiesta.native.sdl.SDLGamepad.boot","fiesta/native/sdl/SDLGamepad.hx",15,0xf691b13d)
std::map<int, SDL_GameController*> gameControllers = std::map<int, SDL_GameController*> ();
namespace fiesta{
namespace native{
namespace sdl{

void SDLGamepad_obj::__construct() { }

Dynamic SDLGamepad_obj::__CreateEmpty() { return new SDLGamepad_obj; }

void *SDLGamepad_obj::_hx_vtable = 0;

Dynamic SDLGamepad_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SDLGamepad_obj > _hx_result = new SDLGamepad_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool SDLGamepad_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x772da06c;
}

 ::haxe::ds::IntMap SDLGamepad_obj::gameControllerIDs;

::cpp::Pointer<  SDL_GameController > SDLGamepad_obj::getGameController(int deviceID){
            	HX_STACKFRAME(&_hx_pos_553d984fb220651d_23_getGameController)
            	
        return gameControllers[deviceID];
    

HXDLIN(  23)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SDLGamepad_obj,getGameController,return )

void SDLGamepad_obj::setGameController(int deviceID,::cpp::Pointer<  SDL_GameController > joystick){
            	HX_STACKFRAME(&_hx_pos_553d984fb220651d_29_setGameController)
            	
        gameControllers[deviceID] = joystick;
    

            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(SDLGamepad_obj,setGameController,(void))

bool SDLGamepad_obj::connect(int deviceID){
            	HX_STACKFRAME(&_hx_pos_553d984fb220651d_35_connect)
HXLINE(  36)		if (SDL_IsGameController(deviceID)) {
HXLINE(  37)			::cpp::Pointer<  SDL_GameController > gameController = SDL_GameControllerOpen(deviceID);
HXLINE(  40)			if (hx::IsNotNull( gameController )) {
HXLINE(  41)				::cpp::Pointer<  SDL_GameController > tmp = gameController;
HXDLIN(  41)				::cpp::Pointer<  SDL_Joystick > joystick = SDL_GameControllerGetJoystick(tmp);
HXLINE(  42)				::cpp::Pointer<  SDL_Joystick > tmp1 = joystick;
HXDLIN(  42)				int id = SDL_JoystickInstanceID(tmp1);
HXLINE(  43)				::cpp::Pointer<  SDL_GameController > tmp2 = gameController;
HXDLIN(  43)				::fiesta::native::sdl::SDLGamepad_obj::setGameController(id,tmp2);
HXLINE(  44)				::fiesta::native::sdl::SDLGamepad_obj::gameControllerIDs->set(deviceID,id);
HXLINE(  46)				return true;
            			}
            		}
HXLINE(  50)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SDLGamepad_obj,connect,return )

bool SDLGamepad_obj::disconnect(int id){
            	HX_STACKFRAME(&_hx_pos_553d984fb220651d_53_disconnect)
HXLINE(  54)		bool check = gameControllers.find (id) != gameControllers.end ();
HXLINE(  56)		if (check) {
HXLINE(  57)			::cpp::Pointer<  SDL_GameController > controller = ::fiesta::native::sdl::SDLGamepad_obj::getGameController(id);
HXLINE(  58)			::cpp::Pointer<  SDL_GameController > tmp = controller;
HXDLIN(  58)			SDL_GameControllerClose(tmp);
HXLINE(  59)			gameControllers.erase (id);
HXLINE(  60)			return true;
            		}
HXLINE(  63)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SDLGamepad_obj,disconnect,return )

int SDLGamepad_obj::getInstanceID(int deviceID){
            	HX_STACKFRAME(&_hx_pos_553d984fb220651d_67_getInstanceID)
HXDLIN(  67)		return ::fiesta::native::sdl::SDLGamepad_obj::gameControllerIDs->get_int(deviceID);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SDLGamepad_obj,getInstanceID,return )

const char* SDLGamepad_obj::getDeviceGUID(int id){
            	HX_STACKFRAME(&_hx_pos_553d984fb220651d_72_getDeviceGUID)
HXLINE(  73)		::cpp::Pointer<  SDL_GameController > tmp = ::fiesta::native::sdl::SDLGamepad_obj::getGameController(id);
HXDLIN(  73)		::cpp::Pointer<  SDL_Joystick > joystick = SDL_GameControllerGetJoystick(tmp);
HXLINE(  75)		if (hx::IsNotNull( joystick )) {
HXLINE(  78)			::cpp::Pointer<  SDL_Joystick > tmp1 = joystick;
HXDLIN(  78)			const char* guid = linc::sdl::joystickGetGUID(tmp1);
HXLINE(  79)			return guid;
            		}
HXLINE(  83)		return null();
            	}


::String SDLGamepad_obj::getDeviceName(int id){
            	HX_STACKFRAME(&_hx_pos_553d984fb220651d_87_getDeviceName)
HXDLIN(  87)		::cpp::Pointer<  SDL_GameController > gamecontroller = ::fiesta::native::sdl::SDLGamepad_obj::getGameController(id);
HXDLIN(  87)		::cpp::Pointer<  SDL_GameController > tmp = gamecontroller;
HXDLIN(  87)		return ::String(SDL_GameControllerName(tmp));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SDLGamepad_obj,getDeviceName,return )


SDLGamepad_obj::SDLGamepad_obj()
{
}

bool SDLGamepad_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"connect") ) { outValue = connect_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"disconnect") ) { outValue = disconnect_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getInstanceID") ) { outValue = getInstanceID_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getDeviceName") ) { outValue = getDeviceName_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"gameControllerIDs") ) { outValue = ( gameControllerIDs ); return true; }
		if (HX_FIELD_EQ(inName,"getGameController") ) { outValue = getGameController_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setGameController") ) { outValue = setGameController_dyn(); return true; }
	}
	return false;
}

bool SDLGamepad_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 17:
		if (HX_FIELD_EQ(inName,"gameControllerIDs") ) { gameControllerIDs=ioValue.Cast<  ::haxe::ds::IntMap >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *SDLGamepad_obj_sMemberStorageInfo = 0;
static hx::StaticInfo SDLGamepad_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*  ::haxe::ds::IntMap */ ,(void *) &SDLGamepad_obj::gameControllerIDs,HX_("gameControllerIDs",ca,9d,93,94)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void SDLGamepad_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SDLGamepad_obj::gameControllerIDs,"gameControllerIDs");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SDLGamepad_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SDLGamepad_obj::gameControllerIDs,"gameControllerIDs");
};

#endif

hx::Class SDLGamepad_obj::__mClass;

static ::String SDLGamepad_obj_sStaticFields[] = {
	HX_("gameControllerIDs",ca,9d,93,94),
	HX_("getGameController",64,62,d1,05),
	HX_("setGameController",70,3a,3f,29),
	HX_("connect",ea,3b,80,15),
	HX_("disconnect",5c,64,44,69),
	HX_("getInstanceID",e6,8a,8a,c8),
	HX_("getDeviceName",37,da,fb,0e),
	::String(null())
};

void SDLGamepad_obj::__register()
{
	SDLGamepad_obj _hx_dummy;
	SDLGamepad_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("fiesta.native.sdl.SDLGamepad",c0,c6,12,de);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SDLGamepad_obj::__GetStatic;
	__mClass->mSetStaticField = &SDLGamepad_obj::__SetStatic;
	__mClass->mMarkFunc = SDLGamepad_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(SDLGamepad_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< SDLGamepad_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SDLGamepad_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SDLGamepad_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SDLGamepad_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void SDLGamepad_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_553d984fb220651d_15_boot)
HXDLIN(  15)		gameControllerIDs =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace fiesta
} // end namespace native
} // end namespace sdl
