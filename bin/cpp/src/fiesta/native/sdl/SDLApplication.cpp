// Generated by Haxe 4.0.0-rc.2+77068e1
#include <hxcpp.h>

#ifndef INCLUDED_92958f0660df95c6
#define INCLUDED_92958f0660df95c6
#include "linc_sdl.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_fiesta_app_events_ApplicationEvent
#include <fiesta/app/events/ApplicationEvent.h>
#endif
#ifndef INCLUDED_fiesta_app_events_ApplicationEventType
#include <fiesta/app/events/ApplicationEventType.h>
#endif
#ifndef INCLUDED_fiesta_graphics_events_RenderEvent
#include <fiesta/graphics/events/RenderEvent.h>
#endif
#ifndef INCLUDED_fiesta_native_sdl_SDLApplication
#include <fiesta/native/sdl/SDLApplication.h>
#endif
#ifndef INCLUDED_fiesta_native_sdl_SDLGamepad
#include <fiesta/native/sdl/SDLGamepad.h>
#endif
#ifndef INCLUDED_fiesta_native_sdl_SDLJoystick
#include <fiesta/native/sdl/SDLJoystick.h>
#endif
#ifndef INCLUDED_fiesta_ui_events_ClipboardEvent
#include <fiesta/ui/events/ClipboardEvent.h>
#endif
#ifndef INCLUDED_fiesta_ui_events_ClipboardEventType
#include <fiesta/ui/events/ClipboardEventType.h>
#endif
#ifndef INCLUDED_fiesta_ui_events_DropEvent
#include <fiesta/ui/events/DropEvent.h>
#endif
#ifndef INCLUDED_fiesta_ui_events_DropEventType
#include <fiesta/ui/events/DropEventType.h>
#endif
#ifndef INCLUDED_fiesta_ui_events_GamepadEvent
#include <fiesta/ui/events/GamepadEvent.h>
#endif
#ifndef INCLUDED_fiesta_ui_events_GamepadEventType
#include <fiesta/ui/events/GamepadEventType.h>
#endif
#ifndef INCLUDED_fiesta_ui_events_JoystickEvent
#include <fiesta/ui/events/JoystickEvent.h>
#endif
#ifndef INCLUDED_fiesta_ui_events_JoystickEventType
#include <fiesta/ui/events/JoystickEventType.h>
#endif
#ifndef INCLUDED_fiesta_ui_events_KeyEvent
#include <fiesta/ui/events/KeyEvent.h>
#endif
#ifndef INCLUDED_fiesta_ui_events_KeyEventType
#include <fiesta/ui/events/KeyEventType.h>
#endif
#ifndef INCLUDED_fiesta_ui_events_MouseEvent
#include <fiesta/ui/events/MouseEvent.h>
#endif
#ifndef INCLUDED_fiesta_ui_events_MouseEventType
#include <fiesta/ui/events/MouseEventType.h>
#endif
#ifndef INCLUDED_fiesta_ui_events_SensorEvent
#include <fiesta/ui/events/SensorEvent.h>
#endif
#ifndef INCLUDED_fiesta_ui_events_TextEvent
#include <fiesta/ui/events/TextEvent.h>
#endif
#ifndef INCLUDED_fiesta_ui_events_TextEventType
#include <fiesta/ui/events/TextEventType.h>
#endif
#ifndef INCLUDED_fiesta_ui_events_WindowEvent
#include <fiesta/ui/events/WindowEvent.h>
#endif
#ifndef INCLUDED_fiesta_ui_events_WindowEventType
#include <fiesta/ui/events/WindowEventType.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_sdl__SDL_SDL_helper
#include <sdl/_SDL/SDL_helper.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b069f54676212053_27_new,"fiesta.native.sdl.SDLApplication","new",0x0558d161,"fiesta.native.sdl.SDLApplication.new","fiesta/native/sdl/SDLApplication.hx",27,0x8873bdee)
HX_LOCAL_STACK_FRAME(_hx_pos_b069f54676212053_109_exec,"fiesta.native.sdl.SDLApplication","exec",0xa279d370,"fiesta.native.sdl.SDLApplication.exec","fiesta/native/sdl/SDLApplication.hx",109,0x8873bdee)
HX_LOCAL_STACK_FRAME(_hx_pos_b069f54676212053_127_handleEvent,"fiesta.native.sdl.SDLApplication","handleEvent",0xfe6ddd53,"fiesta.native.sdl.SDLApplication.handleEvent","fiesta/native/sdl/SDLApplication.hx",127,0x8873bdee)
HX_LOCAL_STACK_FRAME(_hx_pos_b069f54676212053_262_init,"fiesta.native.sdl.SDLApplication","init",0xa5171aef,"fiesta.native.sdl.SDLApplication.init","fiesta/native/sdl/SDLApplication.hx",262,0x8873bdee)
HX_LOCAL_STACK_FRAME(_hx_pos_b069f54676212053_273_processJoystickEvent,"fiesta.native.sdl.SDLApplication","processJoystickEvent",0x03498fae,"fiesta.native.sdl.SDLApplication.processJoystickEvent","fiesta/native/sdl/SDLApplication.hx",273,0x8873bdee)
HX_LOCAL_STACK_FRAME(_hx_pos_b069f54676212053_358_processKeyEvent,"fiesta.native.sdl.SDLApplication","processKeyEvent",0x190c520b,"fiesta.native.sdl.SDLApplication.processKeyEvent","fiesta/native/sdl/SDLApplication.hx",358,0x8873bdee)
HX_LOCAL_STACK_FRAME(_hx_pos_b069f54676212053_409_processMouseEvent,"fiesta.native.sdl.SDLApplication","processMouseEvent",0xd0bcc3c5,"fiesta.native.sdl.SDLApplication.processMouseEvent","fiesta/native/sdl/SDLApplication.hx",409,0x8873bdee)
HX_LOCAL_STACK_FRAME(_hx_pos_b069f54676212053_459_processSensorEvent,"fiesta.native.sdl.SDLApplication","processSensorEvent",0x049bb970,"fiesta.native.sdl.SDLApplication.processSensorEvent","fiesta/native/sdl/SDLApplication.hx",459,0x8873bdee)
HX_LOCAL_STACK_FRAME(_hx_pos_b069f54676212053_481_processTextEvent,"fiesta.native.sdl.SDLApplication","processTextEvent",0xb1fc021d,"fiesta.native.sdl.SDLApplication.processTextEvent","fiesta/native/sdl/SDLApplication.hx",481,0x8873bdee)
HX_LOCAL_STACK_FRAME(_hx_pos_b069f54676212053_508_processWindowEvent,"fiesta.native.sdl.SDLApplication","processWindowEvent",0xaf1363fa,"fiesta.native.sdl.SDLApplication.processWindowEvent","fiesta/native/sdl/SDLApplication.hx",508,0x8873bdee)
HX_LOCAL_STACK_FRAME(_hx_pos_b069f54676212053_552_processClipboardEvent,"fiesta.native.sdl.SDLApplication","processClipboardEvent",0x71443a74,"fiesta.native.sdl.SDLApplication.processClipboardEvent","fiesta/native/sdl/SDLApplication.hx",552,0x8873bdee)
HX_LOCAL_STACK_FRAME(_hx_pos_b069f54676212053_560_processDropEvent,"fiesta.native.sdl.SDLApplication","processDropEvent",0x5ac69f5b,"fiesta.native.sdl.SDLApplication.processDropEvent","fiesta/native/sdl/SDLApplication.hx",560,0x8873bdee)
HX_LOCAL_STACK_FRAME(_hx_pos_b069f54676212053_570_processGamepadEvent,"fiesta.native.sdl.SDLApplication","processGamepadEvent",0x519e9bc9,"fiesta.native.sdl.SDLApplication.processGamepadEvent","fiesta/native/sdl/SDLApplication.hx",570,0x8873bdee)
HX_LOCAL_STACK_FRAME(_hx_pos_b069f54676212053_637_quit,"fiesta.native.sdl.SDLApplication","quit",0xaa661fae,"fiesta.native.sdl.SDLApplication.quit","fiesta/native/sdl/SDLApplication.hx",637,0x8873bdee)
HX_LOCAL_STACK_FRAME(_hx_pos_b069f54676212053_646_registerWindow,"fiesta.native.sdl.SDLApplication","registerWindow",0x59162752,"fiesta.native.sdl.SDLApplication.registerWindow","fiesta/native/sdl/SDLApplication.hx",646,0x8873bdee)
HX_LOCAL_STACK_FRAME(_hx_pos_b069f54676212053_659_setFrameRate,"fiesta.native.sdl.SDLApplication","setFrameRate",0x1a92288a,"fiesta.native.sdl.SDLApplication.setFrameRate","fiesta/native/sdl/SDLApplication.hx",659,0x8873bdee)
HX_LOCAL_STACK_FRAME(_hx_pos_b069f54676212053_670_onTimer,"fiesta.native.sdl.SDLApplication","onTimer",0x0bf373a7,"fiesta.native.sdl.SDLApplication.onTimer","fiesta/native/sdl/SDLApplication.hx",670,0x8873bdee)
HX_LOCAL_STACK_FRAME(_hx_pos_b069f54676212053_689_update,"fiesta.native.sdl.SDLApplication","update",0x5d005ba8,"fiesta.native.sdl.SDLApplication.update","fiesta/native/sdl/SDLApplication.hx",689,0x8873bdee)
HX_LOCAL_STACK_FRAME(_hx_pos_b069f54676212053_751_updateFrame,"fiesta.native.sdl.SDLApplication","updateFrame",0xc27b4b65,"fiesta.native.sdl.SDLApplication.updateFrame","fiesta/native/sdl/SDLApplication.hx",751,0x8873bdee)
HX_LOCAL_STACK_FRAME(_hx_pos_b069f54676212053_754_waitEvent,"fiesta.native.sdl.SDLApplication","waitEvent",0x08cc0d26,"fiesta.native.sdl.SDLApplication.waitEvent","fiesta/native/sdl/SDLApplication.hx",754,0x8873bdee)
HX_LOCAL_STACK_FRAME(_hx_pos_b069f54676212053_788_createApplication,"fiesta.native.sdl.SDLApplication","createApplication",0xf13fe675,"fiesta.native.sdl.SDLApplication.createApplication","fiesta/native/sdl/SDLApplication.hx",788,0x8873bdee)
namespace fiesta{
namespace native{
namespace sdl{

void SDLApplication_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_b069f54676212053_27_new)
HXLINE( 668)		this->firstTime = true;
HXLINE( 667)		this->timerActive = false;
HXLINE( 666)		this->timerID = 0;
HXLINE(  49)		this->analogAxisDeadZone = 1000;
HXLINE(  55)		int initFlags = (((32 | 8192) | 1) | 512);
HXLINE(  58)		initFlags = (initFlags | 16);
HXLINE(  61)		if ((SDL_Init(initFlags) != 0)) {
HXLINE(  62)			HX_STACK_DO_THROW((HX_("Could not initialize SDL : ",0f,ed,68,97) + ( (::String)(SDL_GetError()) )));
            		}
HXLINE(  65)		SDL_LogSetPriority(0,( ( SDL_LogPriority)(4) ));
HXLINE(  67)		::fiesta::native::sdl::SDLApplication_obj::currentApplication = hx::ObjectPtr<OBJ_>(this);
HXLINE(  69)		this->framePeriod = ((Float)16.6666666666666679);
HXLINE(  71)		this->currentUpdate = 0;
HXLINE(  72)		this->lastUpdate = 0;
HXLINE(  73)		this->nextUpdate = 0;
HXLINE(  75)		this->applicationEvent =  ::fiesta::app::events::ApplicationEvent_obj::__alloc( HX_CTX );
HXLINE(  76)		this->renderEvent =  ::fiesta::graphics::events::RenderEvent_obj::__alloc( HX_CTX );
HXLINE(  77)		this->dropEvent =  ::fiesta::ui::events::DropEvent_obj::__alloc( HX_CTX );
HXLINE(  78)		this->gamepadEvent =  ::fiesta::ui::events::GamepadEvent_obj::__alloc( HX_CTX );
HXLINE(  79)		this->clipboardEvent =  ::fiesta::ui::events::ClipboardEvent_obj::__alloc( HX_CTX );
HXLINE(  80)		this->joystickEvent =  ::fiesta::ui::events::JoystickEvent_obj::__alloc( HX_CTX );
HXLINE(  81)		this->keyEvent =  ::fiesta::ui::events::KeyEvent_obj::__alloc( HX_CTX );
HXLINE(  82)		this->mouseEvent =  ::fiesta::ui::events::MouseEvent_obj::__alloc( HX_CTX );
HXLINE(  83)		this->sensorEvent =  ::fiesta::ui::events::SensorEvent_obj::__alloc( HX_CTX );
HXLINE(  84)		this->textEvent =  ::fiesta::ui::events::TextEvent_obj::__alloc( HX_CTX );
HXLINE(  85)		this->windowEvent =  ::fiesta::ui::events::WindowEvent_obj::__alloc( HX_CTX );
HXLINE(  87)		SDL_EventState(4096,1);
HXLINE(  88)		::fiesta::native::sdl::SDLJoystick_obj::init();
HXLINE(  91)		CFURLRef resourcesURL = CFBundleCopyResourcesDirectoryURL (CFBundleGetMainBundle ());
HXLINE(  92)		char path[PATH_MAX];
HXLINE(  93)		
                if (CFURLGetFileSystemRepresentation (resourcesURL, TRUE, (UInt8 *)path, PATH_MAX)) {

                    chdir (path);

                }

                CFRelease (resourcesURL);
            	}

Dynamic SDLApplication_obj::__CreateEmpty() { return new SDLApplication_obj; }

void *SDLApplication_obj::_hx_vtable = 0;

Dynamic SDLApplication_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SDLApplication_obj > _hx_result = new SDLApplication_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool SDLApplication_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1e80f2b7;
}

int SDLApplication_obj::exec(){
            	HX_STACKFRAME(&_hx_pos_b069f54676212053_109_exec)
HXLINE( 110)		this->init();
HXLINE( 115)		while(::fiesta::native::sdl::SDLApplication_obj::active){
HXLINE( 116)			this->update();
            		}
HXLINE( 118)		return this->quit();
            	}


HX_DEFINE_DYNAMIC_FUNC0(SDLApplication_obj,exec,return )

void SDLApplication_obj::handleEvent( SDL_Event event){
            	HX_STACKFRAME(&_hx_pos_b069f54676212053_127_handleEvent)
HXDLIN( 127)		switch((int)(event.type)){
            			case (int)256: {
HXLINE( 253)				::fiesta::native::sdl::SDLApplication_obj::active = false;
            			}
            			break;
            			case (int)259: {
HXLINE( 148)				this->inBackground = true;
HXLINE( 150)				this->windowEvent->eventType = ::fiesta::ui::events::WindowEventType_obj::WINDOW_DEACTIVATE_dyn();
HXLINE( 151)				::fiesta::ui::events::WindowEvent_obj::dispatch(this->windowEvent);
            			}
            			break;
            			case (int)261: case (int)262: {
HXLINE( 156)				this->windowEvent->eventType = ::fiesta::ui::events::WindowEventType_obj::WINDOW_ACTIVATE_dyn();
HXLINE( 157)				::fiesta::ui::events::WindowEvent_obj::dispatch(this->windowEvent);
HXLINE( 159)				this->inBackground = false;
            			}
            			break;
            			case (int)512: {
HXLINE( 215)				switch((int)(event.window.event)){
            					case (int)3: {
HXLINE( 220)						this->processWindowEvent(event);
HXLINE( 222)						if (!(this->inBackground)) {
HXLINE( 223)							::fiesta::graphics::events::RenderEvent_obj::dispatch(this->renderEvent);
            						}
            					}
            					break;
            					case (int)6: {
HXLINE( 229)						this->processWindowEvent(event);
HXLINE( 231)						if (!(this->inBackground)) {
HXLINE( 232)							::fiesta::graphics::events::RenderEvent_obj::dispatch(this->renderEvent);
            						}
            					}
            					break;
            					case (int)1: case (int)2: case (int)4: case (int)7: case (int)8: case (int)9: case (int)10: case (int)11: case (int)12: case (int)13: {
HXLINE( 216)						this->processWindowEvent(event);
            					}
            					break;
            					case (int)14: {
HXLINE( 238)						this->processWindowEvent(event);
HXLINE( 241)						 SDL_Event event1 = linc::sdl::pollEvent();
HXLINE( 243)						if (SDL_PollEvent (&event)) {
HXLINE( 244)							if ((event1.type != 256)) {
HXLINE( 245)								this->handleEvent(event1);
            							}
            						}
            					}
            					break;
            					default:{
            					}
            				}
            			}
            			break;
            			case (int)768: case (int)769: {
HXLINE( 191)				this->processKeyEvent(event);
            			}
            			break;
            			case (int)770: case (int)771: {
HXLINE( 212)				this->processTextEvent(event);
            			}
            			break;
            			case (int)1024: case (int)1025: case (int)1026: case (int)1027: {
HXLINE( 195)				this->processMouseEvent(event);
            			}
            			break;
            			case (int)1536: {
HXLINE( 179)				if (::fiesta::native::sdl::SDLJoystick_obj::isAccelerometer(event.jaxis.which)) {
HXLINE( 180)					this->processSensorEvent(event);
            				}
            				else {
HXLINE( 182)					this->processJoystickEvent(event);
            				}
            			}
            			break;
            			case (int)1537: case (int)1538: case (int)1539: case (int)1540: case (int)1541: case (int)1542: {
HXLINE( 187)				this->processJoystickEvent(event);
            			}
            			break;
            			case (int)1616: case (int)1617: case (int)1618: case (int)1619: case (int)1620: {
HXLINE( 166)				this->processGamepadEvent(event);
            			}
            			break;
            			case (int)1792: case (int)1793: case (int)1794: {
            			}
            			break;
            			case (int)2304: {
HXLINE( 162)				this->processClipboardEvent(event);
            			}
            			break;
            			case (int)4096: {
HXLINE( 169)				this->processDropEvent(event);
            			}
            			break;
            			case (int)32768: {
HXLINE( 130)				if (!(this->inBackground)) {
HXLINE( 131)					this->currentUpdate = SDL_GetTicks();
HXLINE( 132)					this->applicationEvent->eventType = ::fiesta::app::events::ApplicationEventType_obj::UPDATE_dyn();
HXLINE( 133)					this->applicationEvent->deltaTime = (this->currentUpdate - this->lastUpdate);
HXLINE( 134)					this->lastUpdate = this->currentUpdate;
HXLINE( 136)					 ::fiesta::native::sdl::SDLApplication _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 136)					int _hx_tmp1 = _hx_tmp->nextUpdate;
HXDLIN( 136)					_hx_tmp->nextUpdate = (_hx_tmp1 + ::Std_obj::_hx_int(this->framePeriod));
HXLINE( 138)					while((this->nextUpdate <= this->currentUpdate)){
HXLINE( 139)						 ::fiesta::native::sdl::SDLApplication _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 139)						int _hx_tmp3 = _hx_tmp2->nextUpdate;
HXDLIN( 139)						_hx_tmp2->nextUpdate = (_hx_tmp3 + ::Std_obj::_hx_int(this->framePeriod));
            					}
HXLINE( 142)					::fiesta::app::events::ApplicationEvent_obj::dispatch(this->applicationEvent);
HXLINE( 143)					::fiesta::graphics::events::RenderEvent_obj::dispatch(this->renderEvent);
            				}
            			}
            			break;
            			default:{
            			}
            		}
            	}


static ::Dynamic _hx_wrapSDLApplication_obj_handleEvent( hx::Object *obj,const Dynamic &a0) {
	reinterpret_cast< SDLApplication_obj *>(obj)->handleEvent((cpp::Struct<  SDL_Event >) a0);
	return null();
}
::Dynamic SDLApplication_obj::handleEvent_dyn() {
	return hx::CreateMemberFunction1("handleEvent",this,_hx_wrapSDLApplication_obj_handleEvent);}
void SDLApplication_obj::init(){
            	HX_STACKFRAME(&_hx_pos_b069f54676212053_262_init)
HXLINE( 263)		::fiesta::native::sdl::SDLApplication_obj::active = true;
HXLINE( 264)		this->lastUpdate = SDL_GetTicks();
HXLINE( 265)		this->nextUpdate = this->lastUpdate;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SDLApplication_obj,init,(void))

void SDLApplication_obj::processJoystickEvent( SDL_Event event){
            	HX_STACKFRAME(&_hx_pos_b069f54676212053_273_processJoystickEvent)
HXDLIN( 273)		if (hx::IsNotNull( ::fiesta::ui::events::JoystickEvent_obj::callback )) {
HXLINE( 274)			switch((int)(event.type)){
            				case (int)1536: {
HXLINE( 277)					if (!(::fiesta::native::sdl::SDLJoystick_obj::isAccelerometer(event.jaxis.which))) {
HXLINE( 278)						this->joystickEvent->eventType = ::fiesta::ui::events::JoystickEventType_obj::JOYSTICK_AXIS_MOVE_dyn();
HXLINE( 279)						this->joystickEvent->index = event.jaxis.axis;
HXLINE( 280)						Float _hx_tmp;
HXDLIN( 280)						if ((event.jaxis.value > 0)) {
HXLINE( 280)							_hx_tmp = ((Float)32767.0);
            						}
            						else {
HXLINE( 280)							_hx_tmp = ((Float)32768.0);
            						}
HXDLIN( 280)						this->joystickEvent->x = (( (Float)(event.jaxis.value) ) / _hx_tmp);
HXLINE( 281)						this->joystickEvent->id = event.jaxis.which;
HXLINE( 283)						::fiesta::ui::events::JoystickEvent_obj::dispatch(this->joystickEvent);
            					}
            				}
            				break;
            				case (int)1537: {
HXLINE( 288)					if (!(::fiesta::native::sdl::SDLJoystick_obj::isAccelerometer(event.jball.which))) {
HXLINE( 289)						this->joystickEvent->eventType = ::fiesta::ui::events::JoystickEventType_obj::JOYSTICK_TRACKBALL_MOVE_dyn();
HXLINE( 290)						this->joystickEvent->index = event.jball.ball;
HXLINE( 291)						Float _hx_tmp1;
HXDLIN( 291)						if ((event.jball.xrel > 0)) {
HXLINE( 291)							_hx_tmp1 = ((Float)32767.0);
            						}
            						else {
HXLINE( 291)							_hx_tmp1 = ((Float)32768.0);
            						}
HXDLIN( 291)						this->joystickEvent->x = (( (Float)(event.jball.xrel) ) / _hx_tmp1);
HXLINE( 292)						Float _hx_tmp2;
HXDLIN( 292)						if ((event.jball.yrel > 0)) {
HXLINE( 292)							_hx_tmp2 = ((Float)32767.0);
            						}
            						else {
HXLINE( 292)							_hx_tmp2 = ((Float)32768.0);
            						}
HXDLIN( 292)						this->joystickEvent->y = (( (Float)(event.jball.yrel) ) / _hx_tmp2);
HXLINE( 293)						this->joystickEvent->id = event.jball.which;
HXLINE( 295)						::fiesta::ui::events::JoystickEvent_obj::dispatch(this->joystickEvent);
            					}
            				}
            				break;
            				case (int)1538: {
HXLINE( 320)					if (!(::fiesta::native::sdl::SDLJoystick_obj::isAccelerometer(event.jhat.which))) {
HXLINE( 321)						this->joystickEvent->eventType = ::fiesta::ui::events::JoystickEventType_obj::JOYSTICK_HAT_MOVE_dyn();
HXLINE( 322)						this->joystickEvent->index = event.jhat.hat;
HXLINE( 323)						this->joystickEvent->eventValue = event.jhat.value;
HXLINE( 324)						this->joystickEvent->id = event.jhat.which;
HXLINE( 326)						::fiesta::ui::events::JoystickEvent_obj::dispatch(this->joystickEvent);
            					}
            				}
            				break;
            				case (int)1539: {
HXLINE( 300)					if (!(::fiesta::native::sdl::SDLJoystick_obj::isAccelerometer(event.jbutton.which))) {
HXLINE( 301)						this->joystickEvent->eventType = ::fiesta::ui::events::JoystickEventType_obj::JOYSTICK_BUTTON_DOWN_dyn();
HXLINE( 302)						this->joystickEvent->index = event.jbutton.button;
HXLINE( 303)						this->joystickEvent->id = event.jbutton.which;
HXLINE( 305)						::fiesta::ui::events::JoystickEvent_obj::dispatch(this->joystickEvent);
            					}
            				}
            				break;
            				case (int)1540: {
HXLINE( 310)					if (!(::fiesta::native::sdl::SDLJoystick_obj::isAccelerometer(event.jbutton.which))) {
HXLINE( 311)						this->joystickEvent->eventType = ::fiesta::ui::events::JoystickEventType_obj::JOYSTICK_BUTTON_UP_dyn();
HXLINE( 312)						this->joystickEvent->index = event.jbutton.button;
HXLINE( 313)						this->joystickEvent->id = event.jbutton.which;
HXLINE( 315)						::fiesta::ui::events::JoystickEvent_obj::dispatch(this->joystickEvent);
            					}
            				}
            				break;
            				case (int)1541: {
HXLINE( 331)					if (::fiesta::native::sdl::SDLJoystick_obj::connect(event.jdevice.which)) {
HXLINE( 332)						this->joystickEvent->eventType = ::fiesta::ui::events::JoystickEventType_obj::JOYSTICK_CONNECT_dyn();
HXLINE( 333)						this->joystickEvent->id = ::fiesta::native::sdl::SDLJoystick_obj::getInstanceID(event.jdevice.which);
HXLINE( 335)						::fiesta::ui::events::JoystickEvent_obj::dispatch(this->joystickEvent);
            					}
            				}
            				break;
            				case (int)1542: {
HXLINE( 340)					if (::fiesta::native::sdl::SDLJoystick_obj::connect(event.jdevice.which)) {
HXLINE( 341)						this->joystickEvent->eventType = ::fiesta::ui::events::JoystickEventType_obj::JOYSTICK_DISCONNECT_dyn();
HXLINE( 342)						this->joystickEvent->id = event.jdevice.which;
HXLINE( 344)						::fiesta::ui::events::JoystickEvent_obj::dispatch(this->joystickEvent);
HXLINE( 345)						::fiesta::native::sdl::SDLJoystick_obj::disconnect(event.jdevice.which);
            					}
            				}
            				break;
            				default:{
            				}
            			}
            		}
            	}


static ::Dynamic _hx_wrapSDLApplication_obj_processJoystickEvent( hx::Object *obj,const Dynamic &a0) {
	reinterpret_cast< SDLApplication_obj *>(obj)->processJoystickEvent((cpp::Struct<  SDL_Event >) a0);
	return null();
}
::Dynamic SDLApplication_obj::processJoystickEvent_dyn() {
	return hx::CreateMemberFunction1("processJoystickEvent",this,_hx_wrapSDLApplication_obj_processJoystickEvent);}
void SDLApplication_obj::processKeyEvent( SDL_Event event){
            	HX_STACKFRAME(&_hx_pos_b069f54676212053_358_processKeyEvent)
HXDLIN( 358)		if (hx::IsNotNull( ::fiesta::ui::events::KeyEvent_obj::callback )) {
HXLINE( 359)			switch((int)(event.type)){
            				case (int)768: {
HXLINE( 362)					this->keyEvent->eventType = ::fiesta::ui::events::KeyEventType_obj::KEY_DOWN_dyn();
            				}
            				break;
            				case (int)769: {
HXLINE( 366)					this->keyEvent->eventType = ::fiesta::ui::events::KeyEventType_obj::KEY_UP_dyn();
            				}
            				break;
            				default:{
            				}
            			}
HXLINE( 371)			this->keyEvent->keyCode = event.key.keysym.sym;
HXLINE( 372)			this->keyEvent->modifier = event.key.keysym.mod;
HXLINE( 373)			this->keyEvent->windowID = event.key.windowID;
HXLINE( 375)			if (hx::IsEq( this->keyEvent->eventType,::fiesta::ui::events::KeyEventType_obj::KEY_DOWN_dyn() )) {
HXLINE( 376)				if ((this->keyEvent->keyCode == (int)1073741881)) {
HXLINE( 377)					 ::fiesta::ui::events::KeyEvent _hx_tmp = this->keyEvent;
HXDLIN( 377)					_hx_tmp->modifier = (_hx_tmp->modifier | 8192);
            				}
HXLINE( 378)				if ((this->keyEvent->keyCode == (int)1073742050)) {
HXLINE( 379)					 ::fiesta::ui::events::KeyEvent _hx_tmp1 = this->keyEvent;
HXDLIN( 379)					_hx_tmp1->modifier = (_hx_tmp1->modifier | 256);
            				}
HXLINE( 380)				if ((this->keyEvent->keyCode == (int)1073742048)) {
HXLINE( 381)					 ::fiesta::ui::events::KeyEvent _hx_tmp2 = this->keyEvent;
HXDLIN( 381)					_hx_tmp2->modifier = (_hx_tmp2->modifier | 64);
            				}
HXLINE( 382)				if ((this->keyEvent->keyCode == (int)1073742051)) {
HXLINE( 383)					 ::fiesta::ui::events::KeyEvent _hx_tmp3 = this->keyEvent;
HXDLIN( 383)					_hx_tmp3->modifier = (_hx_tmp3->modifier | 1024);
            				}
HXLINE( 384)				if ((this->keyEvent->keyCode == (int)1073742049)) {
HXLINE( 385)					 ::fiesta::ui::events::KeyEvent _hx_tmp4 = this->keyEvent;
HXDLIN( 385)					_hx_tmp4->modifier = (_hx_tmp4->modifier | 1);
            				}
HXLINE( 386)				if ((this->keyEvent->keyCode == (int)1073742081)) {
HXLINE( 387)					 ::fiesta::ui::events::KeyEvent _hx_tmp5 = this->keyEvent;
HXDLIN( 387)					_hx_tmp5->modifier = (_hx_tmp5->modifier | 16384);
            				}
HXLINE( 388)				if ((this->keyEvent->keyCode == (int)1073741907)) {
HXLINE( 389)					 ::fiesta::ui::events::KeyEvent _hx_tmp6 = this->keyEvent;
HXDLIN( 389)					_hx_tmp6->modifier = (_hx_tmp6->modifier | 4096);
            				}
HXLINE( 390)				if ((this->keyEvent->keyCode == (int)1073742054)) {
HXLINE( 391)					 ::fiesta::ui::events::KeyEvent _hx_tmp7 = this->keyEvent;
HXDLIN( 391)					_hx_tmp7->modifier = (_hx_tmp7->modifier | 512);
            				}
HXLINE( 392)				if ((this->keyEvent->keyCode == (int)1073742052)) {
HXLINE( 393)					 ::fiesta::ui::events::KeyEvent _hx_tmp8 = this->keyEvent;
HXDLIN( 393)					_hx_tmp8->modifier = (_hx_tmp8->modifier | 128);
            				}
HXLINE( 394)				if ((this->keyEvent->keyCode == (int)1073742055)) {
HXLINE( 395)					 ::fiesta::ui::events::KeyEvent _hx_tmp9 = this->keyEvent;
HXDLIN( 395)					_hx_tmp9->modifier = (_hx_tmp9->modifier | 2048);
            				}
HXLINE( 396)				if ((this->keyEvent->keyCode == (int)1073742053)) {
HXLINE( 397)					 ::fiesta::ui::events::KeyEvent _hx_tmp10 = this->keyEvent;
HXDLIN( 397)					_hx_tmp10->modifier = (_hx_tmp10->modifier | 2);
            				}
            			}
HXLINE( 400)			::fiesta::ui::events::KeyEvent_obj::dispatch(this->keyEvent);
            		}
            	}


static ::Dynamic _hx_wrapSDLApplication_obj_processKeyEvent( hx::Object *obj,const Dynamic &a0) {
	reinterpret_cast< SDLApplication_obj *>(obj)->processKeyEvent((cpp::Struct<  SDL_Event >) a0);
	return null();
}
::Dynamic SDLApplication_obj::processKeyEvent_dyn() {
	return hx::CreateMemberFunction1("processKeyEvent",this,_hx_wrapSDLApplication_obj_processKeyEvent);}
void SDLApplication_obj::processMouseEvent( SDL_Event event){
            	HX_STACKFRAME(&_hx_pos_b069f54676212053_409_processMouseEvent)
HXDLIN( 409)		if (hx::IsNotNull( ::fiesta::ui::events::MouseEvent_obj::callback )) {
HXLINE( 410)			switch((int)(event.type)){
            				case (int)1024: {
HXLINE( 413)					this->mouseEvent->eventType = ::fiesta::ui::events::MouseEventType_obj::MOUSE_MOVE_dyn();
HXLINE( 414)					this->mouseEvent->x = ( (Float)(event.motion.x) );
HXLINE( 415)					this->mouseEvent->y = ( (Float)(event.motion.y) );
HXLINE( 416)					this->mouseEvent->movementX = ( (Float)(event.motion.xrel) );
HXLINE( 417)					this->mouseEvent->movementY = ( (Float)(event.motion.yrel) );
            				}
            				break;
            				case (int)1025: {
HXLINE( 421)					{
HXLINE( 421)						int _enable = 1;
HXDLIN( 421)						SDL_CaptureMouse((SDL_bool)_enable);
            					}
HXLINE( 422)					this->mouseEvent->eventType = ::fiesta::ui::events::MouseEventType_obj::MOUSE_DOWN_dyn();
HXLINE( 423)					this->mouseEvent->button = (event.button.button - 1);
HXLINE( 424)					this->mouseEvent->x = ( (Float)(event.button.x) );
HXLINE( 425)					this->mouseEvent->y = ( (Float)(event.button.y) );
            				}
            				break;
            				case (int)1026: {
HXLINE( 429)					{
HXLINE( 429)						int _enable1 = 0;
HXDLIN( 429)						SDL_CaptureMouse((SDL_bool)_enable1);
            					}
HXLINE( 430)					this->mouseEvent->eventType = ::fiesta::ui::events::MouseEventType_obj::MOUSE_UP_dyn();
HXLINE( 431)					this->mouseEvent->button = (event.button.button - 1);
HXLINE( 432)					this->mouseEvent->x = ( (Float)(event.button.x) );
HXLINE( 433)					this->mouseEvent->y = ( (Float)(event.button.y) );
            				}
            				break;
            				case (int)1027: {
HXLINE( 437)					this->mouseEvent->eventType = ::fiesta::ui::events::MouseEventType_obj::MOUSE_WHEEL_dyn();
HXLINE( 439)					if ((event.wheel.direction == SDL_MOUSEWHEEL_FLIPPED)) {
HXLINE( 440)						this->mouseEvent->x = ( (Float)(-(event.wheel.x)) );
HXLINE( 441)						this->mouseEvent->y = ( (Float)(-(event.wheel.y)) );
            					}
            					else {
HXLINE( 443)						this->mouseEvent->x = ( (Float)(event.wheel.x) );
HXLINE( 444)						this->mouseEvent->y = ( (Float)(event.wheel.y) );
            					}
            				}
            				break;
            				default:{
            				}
            			}
HXLINE( 449)			this->mouseEvent->windowID = event.button.windowID;
HXLINE( 450)			::fiesta::ui::events::MouseEvent_obj::dispatch(this->mouseEvent);
            		}
            	}


static ::Dynamic _hx_wrapSDLApplication_obj_processMouseEvent( hx::Object *obj,const Dynamic &a0) {
	reinterpret_cast< SDLApplication_obj *>(obj)->processMouseEvent((cpp::Struct<  SDL_Event >) a0);
	return null();
}
::Dynamic SDLApplication_obj::processMouseEvent_dyn() {
	return hx::CreateMemberFunction1("processMouseEvent",this,_hx_wrapSDLApplication_obj_processMouseEvent);}
void SDLApplication_obj::processSensorEvent( SDL_Event event){
            	HX_STACKFRAME(&_hx_pos_b069f54676212053_459_processSensorEvent)
HXDLIN( 459)		if (hx::IsNotNull( ::fiesta::ui::events::SensorEvent_obj::callback )) {
HXLINE( 460)			Float value = (( (Float)(event.jaxis.value) ) / ((Float)32767.0));
HXLINE( 462)			switch((int)(event.jaxis.axis)){
            				case (int)0: {
HXLINE( 464)					this->sensorEvent->x = value;
            				}
            				break;
            				case (int)1: {
HXLINE( 466)					this->sensorEvent->y = value;
            				}
            				break;
            				case (int)2: {
HXLINE( 468)					this->sensorEvent->z = value;
            				}
            				break;
            				default:{
            				}
            			}
HXLINE( 472)			::fiesta::ui::events::SensorEvent_obj::dispatch(this->sensorEvent);
            		}
            	}


static ::Dynamic _hx_wrapSDLApplication_obj_processSensorEvent( hx::Object *obj,const Dynamic &a0) {
	reinterpret_cast< SDLApplication_obj *>(obj)->processSensorEvent((cpp::Struct<  SDL_Event >) a0);
	return null();
}
::Dynamic SDLApplication_obj::processSensorEvent_dyn() {
	return hx::CreateMemberFunction1("processSensorEvent",this,_hx_wrapSDLApplication_obj_processSensorEvent);}
void SDLApplication_obj::processTextEvent( SDL_Event event){
            	HX_STACKFRAME(&_hx_pos_b069f54676212053_481_processTextEvent)
HXDLIN( 481)		if (hx::IsNotNull( ::fiesta::ui::events::TextEvent_obj::callback )) {
HXLINE( 482)			switch((int)(event.type)){
            				case (int)770: {
HXLINE( 489)					this->textEvent->eventType = ::fiesta::ui::events::TextEventType_obj::TEXT_EDIT_dyn();
HXLINE( 490)					this->textEvent->start = event.edit.start;
HXLINE( 491)					this->textEvent->length = event.edit.length;
            				}
            				break;
            				case (int)771: {
HXLINE( 485)					this->textEvent->eventType = ::fiesta::ui::events::TextEventType_obj::TEXT_INPUT_dyn();
            				}
            				break;
            				default:{
            				}
            			}
HXLINE( 496)			bool _hx_tmp;
HXDLIN( 496)			if (hx::IsNull( this->textEvent->text )) {
HXLINE( 496)				_hx_tmp = (::String(this->textEvent->text) != HX_("",00,00,00,00));
            			}
            			else {
HXLINE( 496)				_hx_tmp = true;
            			}
HXDLIN( 496)			if (_hx_tmp) {
HXLINE( 497)				this->textEvent->text = null();
            			}
HXLINE( 500)			this->textEvent->text = event.text.text;
HXLINE( 501)			this->textEvent->windowID = event.text.windowID;
HXLINE( 503)			::fiesta::ui::events::TextEvent_obj::dispatch(this->textEvent);
            		}
            	}


static ::Dynamic _hx_wrapSDLApplication_obj_processTextEvent( hx::Object *obj,const Dynamic &a0) {
	reinterpret_cast< SDLApplication_obj *>(obj)->processTextEvent((cpp::Struct<  SDL_Event >) a0);
	return null();
}
::Dynamic SDLApplication_obj::processTextEvent_dyn() {
	return hx::CreateMemberFunction1("processTextEvent",this,_hx_wrapSDLApplication_obj_processTextEvent);}
void SDLApplication_obj::processWindowEvent( SDL_Event event){
            	HX_STACKFRAME(&_hx_pos_b069f54676212053_508_processWindowEvent)
HXDLIN( 508)		if (hx::IsNotNull( ::fiesta::ui::events::WindowEvent_obj::callback )) {
HXLINE( 509)			switch((int)(event.window.event)){
            				case (int)1: {
HXLINE( 511)					this->windowEvent->eventType = ::fiesta::ui::events::WindowEventType_obj::WINDOW_ACTIVATE_dyn();
            				}
            				break;
            				case (int)2: {
HXLINE( 515)					this->windowEvent->eventType = ::fiesta::ui::events::WindowEventType_obj::WINDOW_DEACTIVATE_dyn();
            				}
            				break;
            				case (int)3: {
HXLINE( 529)					this->windowEvent->eventType = ::fiesta::ui::events::WindowEventType_obj::WINDOW_EXPOSE_dyn();
            				}
            				break;
            				case (int)4: {
HXLINE( 532)					this->windowEvent->eventType = ::fiesta::ui::events::WindowEventType_obj::WINDOW_MOVE_dyn();
HXLINE( 533)					this->windowEvent->x = event.window.data1;
HXLINE( 534)					this->windowEvent->y = event.window.data2;
            				}
            				break;
            				case (int)6: {
HXLINE( 537)					this->windowEvent->eventType = ::fiesta::ui::events::WindowEventType_obj::WINDOW_RESIZE_dyn();
HXLINE( 538)					this->windowEvent->width = event.window.data1;
HXLINE( 539)					this->windowEvent->height = event.window.data2;
            				}
            				break;
            				case (int)7: {
HXLINE( 527)					this->windowEvent->eventType = ::fiesta::ui::events::WindowEventType_obj::WINDOW_MINIMIZE_dyn();
            				}
            				break;
            				case (int)8: {
HXLINE( 525)					this->windowEvent->eventType = ::fiesta::ui::events::WindowEventType_obj::WINDOW_MAXIMIZE_dyn();
            				}
            				break;
            				case (int)9: {
HXLINE( 542)					this->windowEvent->eventType = ::fiesta::ui::events::WindowEventType_obj::WINDOW_RESTORE_dyn();
            				}
            				break;
            				case (int)10: {
HXLINE( 517)					this->windowEvent->eventType = ::fiesta::ui::events::WindowEventType_obj::WINDOW_ENTER_dyn();
            				}
            				break;
            				case (int)11: {
HXLINE( 523)					this->windowEvent->eventType = ::fiesta::ui::events::WindowEventType_obj::WINDOW_LEAVE_dyn();
            				}
            				break;
            				case (int)12: {
HXLINE( 519)					this->windowEvent->eventType = ::fiesta::ui::events::WindowEventType_obj::WINDOW_FOCUS_IN_dyn();
            				}
            				break;
            				case (int)13: {
HXLINE( 521)					this->windowEvent->eventType = ::fiesta::ui::events::WindowEventType_obj::WINDOW_FOCUS_OUT_dyn();
            				}
            				break;
            				case (int)14: {
HXLINE( 513)					this->windowEvent->eventType = ::fiesta::ui::events::WindowEventType_obj::WINDOW_CLOSE_dyn();
            				}
            				break;
            				default:{
            				}
            			}
HXLINE( 546)			this->windowEvent->windowID = event.window.windowID;
HXLINE( 547)			::fiesta::ui::events::WindowEvent_obj::dispatch(this->windowEvent);
            		}
            	}


static ::Dynamic _hx_wrapSDLApplication_obj_processWindowEvent( hx::Object *obj,const Dynamic &a0) {
	reinterpret_cast< SDLApplication_obj *>(obj)->processWindowEvent((cpp::Struct<  SDL_Event >) a0);
	return null();
}
::Dynamic SDLApplication_obj::processWindowEvent_dyn() {
	return hx::CreateMemberFunction1("processWindowEvent",this,_hx_wrapSDLApplication_obj_processWindowEvent);}
void SDLApplication_obj::processClipboardEvent( SDL_Event event){
            	HX_STACKFRAME(&_hx_pos_b069f54676212053_552_processClipboardEvent)
HXDLIN( 552)		if (hx::IsNotNull( ::fiesta::ui::events::ClipboardEvent_obj::callback )) {
HXLINE( 553)			this->clipboardEvent->eventType = ::fiesta::ui::events::ClipboardEventType_obj::CLIPBOARD_UPDATE_dyn();
HXLINE( 555)			::fiesta::ui::events::ClipboardEvent_obj::dispatch(this->clipboardEvent);
            		}
            	}


static ::Dynamic _hx_wrapSDLApplication_obj_processClipboardEvent( hx::Object *obj,const Dynamic &a0) {
	reinterpret_cast< SDLApplication_obj *>(obj)->processClipboardEvent((cpp::Struct<  SDL_Event >) a0);
	return null();
}
::Dynamic SDLApplication_obj::processClipboardEvent_dyn() {
	return hx::CreateMemberFunction1("processClipboardEvent",this,_hx_wrapSDLApplication_obj_processClipboardEvent);}
void SDLApplication_obj::processDropEvent( SDL_Event event){
            	HX_STACKFRAME(&_hx_pos_b069f54676212053_560_processDropEvent)
HXDLIN( 560)		if (hx::IsNotNull( ::fiesta::ui::events::DropEvent_obj::callback )) {
HXLINE( 561)			this->dropEvent->eventType = ::fiesta::ui::events::DropEventType_obj::DROP_FILE_dyn();
HXLINE( 562)			::String _hx_tmp = ::String(event.drop.file);
HXDLIN( 562)			this->dropEvent->file = _hx_tmp;
HXLINE( 564)			::fiesta::ui::events::DropEvent_obj::dispatch(this->dropEvent);
HXLINE( 565)			this->dropEvent->file = null();
            		}
            	}


static ::Dynamic _hx_wrapSDLApplication_obj_processDropEvent( hx::Object *obj,const Dynamic &a0) {
	reinterpret_cast< SDLApplication_obj *>(obj)->processDropEvent((cpp::Struct<  SDL_Event >) a0);
	return null();
}
::Dynamic SDLApplication_obj::processDropEvent_dyn() {
	return hx::CreateMemberFunction1("processDropEvent",this,_hx_wrapSDLApplication_obj_processDropEvent);}
void SDLApplication_obj::processGamepadEvent( SDL_Event event){
            	HX_STACKFRAME(&_hx_pos_b069f54676212053_570_processGamepadEvent)
HXDLIN( 570)		if (hx::IsNotNull( ::fiesta::ui::events::GamepadEvent_obj::callback )) {
HXLINE( 571)			switch((int)(event.type)){
            				case (int)1616: {
HXLINE( 573)					if (this->gamepadsAxisMap->exists(event.caxis.which)) {
HXLINE( 574)						::Dynamic this1 = this->gamepadsAxisMap->get(event.caxis.which);
HXDLIN( 574)						( ( ::haxe::ds::IntMap)(this1) )->set(event.caxis.axis,event.caxis.value);
            					}
            					else {
HXLINE( 575)						::Dynamic this2 = this->gamepadsAxisMap->get(event.caxis.which);
HXDLIN( 575)						 ::Dynamic _hx_tmp = ( ( ::haxe::ds::IntMap)(this2) )->get(event.caxis.axis);
HXDLIN( 575)						if (hx::IsEq( _hx_tmp,event.caxis.value )) {
HXLINE( 576)							return;
            						}
            					}
HXLINE( 579)					this->gamepadEvent->eventType = ::fiesta::ui::events::GamepadEventType_obj::GAMEPAD_AXIS_MOVE_dyn();
HXLINE( 580)					this->gamepadEvent->axis = event.caxis.axis;
HXLINE( 581)					this->gamepadEvent->id = event.caxis.which;
HXLINE( 583)					bool _hx_tmp1;
HXDLIN( 583)					if ((event.caxis.value > -(this->analogAxisDeadZone))) {
HXLINE( 583)						_hx_tmp1 = (event.caxis.value < this->analogAxisDeadZone);
            					}
            					else {
HXLINE( 583)						_hx_tmp1 = false;
            					}
HXDLIN( 583)					if (_hx_tmp1) {
HXLINE( 584)						::Dynamic this3 = this->gamepadsAxisMap->get(event.caxis.which);
HXDLIN( 584)						if (hx::IsNotEq( ( ( ::haxe::ds::IntMap)(this3) )->get(event.caxis.axis),0 )) {
HXLINE( 585)							{
HXLINE( 585)								::Dynamic this4 = this->gamepadsAxisMap->get(event.caxis.which);
HXDLIN( 585)								( ( ::haxe::ds::IntMap)(this4) )->set(event.caxis.axis,0);
            							}
HXLINE( 586)							this->gamepadEvent->axisValue = ( (Float)(0) );
HXLINE( 587)							::fiesta::ui::events::GamepadEvent_obj::dispatch(this->gamepadEvent);
            						}
            					}
HXLINE( 591)					{
HXLINE( 591)						::Dynamic this5 = this->gamepadsAxisMap->get(event.caxis.which);
HXDLIN( 591)						( ( ::haxe::ds::IntMap)(this5) )->set(event.caxis.axis,event.caxis.value);
            					}
HXLINE( 592)					Float _hx_tmp2;
HXDLIN( 592)					if ((event.caxis.value > 0)) {
HXLINE( 592)						_hx_tmp2 = ((Float)32767.0);
            					}
            					else {
HXLINE( 592)						_hx_tmp2 = ((Float)32768.0);
            					}
HXDLIN( 592)					this->gamepadEvent->axisValue = (( (Float)(event.caxis.value) ) / _hx_tmp2);
HXLINE( 594)					::fiesta::ui::events::GamepadEvent_obj::dispatch(this->gamepadEvent);
            				}
            				break;
            				case (int)1617: {
HXLINE( 597)					this->gamepadEvent->eventType = ::fiesta::ui::events::GamepadEventType_obj::GAMEPAD_BUTTON_DOWN_dyn();
HXLINE( 598)					this->gamepadEvent->button = event.cbutton.button;
HXLINE( 599)					this->gamepadEvent->id = event.cbutton.which;
HXLINE( 601)					::fiesta::ui::events::GamepadEvent_obj::dispatch(this->gamepadEvent);
            				}
            				break;
            				case (int)1618: {
HXLINE( 604)					this->gamepadEvent->eventType = ::fiesta::ui::events::GamepadEventType_obj::GAMEPAD_BUTTON_UP_dyn();
HXLINE( 605)					this->gamepadEvent->button = event.cbutton.button;
HXLINE( 606)					this->gamepadEvent->id = event.cbutton.which;
HXLINE( 608)					::fiesta::ui::events::GamepadEvent_obj::dispatch(this->gamepadEvent);
            				}
            				break;
            				case (int)1619: {
HXLINE( 611)					if (::fiesta::native::sdl::SDLGamepad_obj::connect(event.cdevice.which)) {
HXLINE( 612)						this->gamepadEvent->eventType = ::fiesta::ui::events::GamepadEventType_obj::GAMEPAD_CONNECT_dyn();
HXLINE( 613)						this->gamepadEvent->id = ::fiesta::native::sdl::SDLGamepad_obj::getInstanceID(event.cdevice.which);
HXLINE( 615)						::fiesta::ui::events::GamepadEvent_obj::dispatch(this->gamepadEvent);
            					}
            				}
            				break;
            				case (int)1620: {
HXLINE( 620)					this->gamepadEvent->eventType = ::fiesta::ui::events::GamepadEventType_obj::GAMEPAD_DISCONNECT_dyn();
HXLINE( 621)					this->gamepadEvent->id = event.cdevice.which;
HXLINE( 623)					::fiesta::ui::events::GamepadEvent_obj::dispatch(this->gamepadEvent);
HXLINE( 624)					::fiesta::native::sdl::SDLGamepad_obj::disconnect(event.cdevice.which);
            				}
            				break;
            				default:{
            				}
            			}
            		}
            	}


static ::Dynamic _hx_wrapSDLApplication_obj_processGamepadEvent( hx::Object *obj,const Dynamic &a0) {
	reinterpret_cast< SDLApplication_obj *>(obj)->processGamepadEvent((cpp::Struct<  SDL_Event >) a0);
	return null();
}
::Dynamic SDLApplication_obj::processGamepadEvent_dyn() {
	return hx::CreateMemberFunction1("processGamepadEvent",this,_hx_wrapSDLApplication_obj_processGamepadEvent);}
int SDLApplication_obj::quit(){
            	HX_STACKFRAME(&_hx_pos_b069f54676212053_637_quit)
HXLINE( 638)		this->applicationEvent->eventType = ::fiesta::app::events::ApplicationEventType_obj::EXIT_dyn();
HXLINE( 639)		::fiesta::app::events::ApplicationEvent_obj::dispatch(this->applicationEvent);
HXLINE( 641)		{
HXLINE( 641)			::sdl::_SDL::SDL_helper_obj::quit();
HXDLIN( 641)			SDL_Quit();
            		}
HXLINE( 643)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SDLApplication_obj,quit,return )

void SDLApplication_obj::registerWindow(::cpp::Pointer<  SDL_Window > window){
            	HX_STACKFRAME(&_hx_pos_b069f54676212053_646_registerWindow)
            	}


HX_DEFINE_DYNAMIC_FUNC1(SDLApplication_obj,registerWindow,(void))

void SDLApplication_obj::setFrameRate(Float frameRate){
            	HX_STACKFRAME(&_hx_pos_b069f54676212053_659_setFrameRate)
HXDLIN( 659)		if ((frameRate > 0)) {
HXLINE( 660)			this->framePeriod = (((Float)1000.0) / frameRate);
            		}
            		else {
HXLINE( 662)			this->framePeriod = ((Float)1000.0);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(SDLApplication_obj,setFrameRate,(void))

int SDLApplication_obj::onTimer(int interval, ::Dynamic v){
            	HX_STACKFRAME(&_hx_pos_b069f54676212053_670_onTimer)
HXLINE( 671)		 SDL_Event event = SDL_Event{};
HXLINE( 672)		 cpp::Struct<SDL_UserEvent> userevent = SDL_UserEvent{};
HXLINE( 674)		userevent->type = 32768;
HXLINE( 675)		userevent->code = 0;
HXLINE( 676)		userevent->data1 = null();
HXLINE( 677)		userevent->data2 = null();
HXLINE( 678)		event.type = 32768;
HXLINE( 679)		event.user = userevent;
HXLINE( 681)		this->timerActive = false;
HXLINE( 682)		this->timerID = 0;
HXLINE( 684)		SDL_PushEvent(&(event));
HXLINE( 686)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(SDLApplication_obj,onTimer,return )

bool SDLApplication_obj::update(){
            	HX_STACKFRAME(&_hx_pos_b069f54676212053_689_update)
HXLINE( 691)		 SDL_Event event = SDL_Event{};
HXLINE( 692)		event.type = -1;
HXLINE( 696)		bool _hx_tmp;
HXDLIN( 696)		if (::fiesta::native::sdl::SDLApplication_obj::active) {
HXLINE( 696)			if (!(this->firstTime)) {
HXLINE( 696)				_hx_tmp = (this->waitEvent(event) == 0);
            			}
            			else {
HXLINE( 696)				_hx_tmp = true;
            			}
            		}
            		else {
HXLINE( 696)			_hx_tmp = false;
            		}
HXDLIN( 696)		if (_hx_tmp) {
HXLINE( 698)			this->firstTime = false;
HXLINE( 700)			this->handleEvent(event);
HXLINE( 701)			event.type = -1;
HXLINE( 702)			if (!(::fiesta::native::sdl::SDLApplication_obj::active)) {
HXLINE( 703)				return ::fiesta::native::sdl::SDLApplication_obj::active;
            			}
HXLINE( 707)			while(SDL_PollEvent (&event)){
HXLINE( 709)				this->handleEvent(event);
HXLINE( 710)				event.type = -1;
HXLINE( 711)				if (!(::fiesta::native::sdl::SDLApplication_obj::active)) {
HXLINE( 712)					return ::fiesta::native::sdl::SDLApplication_obj::active;
            				}
            			}
HXLINE( 716)			this->currentUpdate = SDL_GetTicks();
HXLINE( 730)			if ((this->currentUpdate >= this->nextUpdate)) {
HXLINE( 732)				::sdl::_SDL::SDL_helper_obj::remove_timer(this->timerID);
HXLINE( 733)				this->onTimer(0,0);
            			}
            			else {
HXLINE( 735)				if (!(this->timerActive)) {
HXLINE( 737)					this->timerActive = true;
HXLINE( 738)					this->timerID = ::sdl::_SDL::SDL_helper_obj::add_timer((this->nextUpdate - this->currentUpdate),this->onTimer_dyn(),0);
            				}
            			}
HXLINE( 741)			return ::fiesta::native::sdl::SDLApplication_obj::active;
            		}
HXLINE( 746)		return ::fiesta::native::sdl::SDLApplication_obj::active;
            	}


HX_DEFINE_DYNAMIC_FUNC0(SDLApplication_obj,update,return )

void SDLApplication_obj::updateFrame(){
            	HX_STACKFRAME(&_hx_pos_b069f54676212053_751_updateFrame)
HXDLIN( 751)		::fiesta::native::sdl::SDLApplication_obj::currentApplication->update();
            	}


HX_DEFINE_DYNAMIC_FUNC0(SDLApplication_obj,updateFrame,(void))

int SDLApplication_obj::waitEvent( SDL_Event event){
            	HX_STACKFRAME(&_hx_pos_b069f54676212053_754_waitEvent)
HXLINE( 756)		__hxcpp_enter_gc_free_zone();
HXLINE( 757)		event = linc::sdl::waitEvent();
HXLINE( 758)		__hxcpp_exit_gc_free_zone();
HXLINE( 759)		return 0;
            	}


static ::Dynamic _hx_wrapSDLApplication_obj_waitEvent( hx::Object *obj,const Dynamic &a0) {
	return reinterpret_cast< SDLApplication_obj *>(obj)->waitEvent((cpp::Struct<  SDL_Event >) a0);
}
::Dynamic SDLApplication_obj::waitEvent_dyn() {
	return hx::CreateMemberFunction1("waitEvent",this,_hx_wrapSDLApplication_obj_waitEvent);}
 ::fiesta::native::sdl::SDLApplication SDLApplication_obj::createApplication(){
            	HX_GC_STACKFRAME(&_hx_pos_b069f54676212053_788_createApplication)
HXDLIN( 788)		return  ::fiesta::native::sdl::SDLApplication_obj::__alloc( HX_CTX );
            	}


HX_DEFINE_DYNAMIC_FUNC0(SDLApplication_obj,createApplication,return )

 ::Dynamic SDLApplication_obj::callback;

 ::fiesta::native::sdl::SDLApplication SDLApplication_obj::currentApplication;

bool SDLApplication_obj::active;


hx::ObjectPtr< SDLApplication_obj > SDLApplication_obj::__new() {
	hx::ObjectPtr< SDLApplication_obj > __this = new SDLApplication_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< SDLApplication_obj > SDLApplication_obj::__alloc(hx::Ctx *_hx_ctx) {
	SDLApplication_obj *__this = (SDLApplication_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SDLApplication_obj), true, "fiesta.native.sdl.SDLApplication"));
	*(void **)__this = SDLApplication_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

SDLApplication_obj::SDLApplication_obj()
{
}

void SDLApplication_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SDLApplication);
	HX_MARK_MEMBER_NAME(gamepadsAxisMap,"gamepadsAxisMap");
	HX_MARK_MEMBER_NAME(inBackground,"inBackground");
	HX_MARK_MEMBER_NAME(framePeriod,"framePeriod");
	HX_MARK_MEMBER_NAME(currentUpdate,"currentUpdate");
	HX_MARK_MEMBER_NAME(lastUpdate,"lastUpdate");
	HX_MARK_MEMBER_NAME(nextUpdate,"nextUpdate");
	HX_MARK_MEMBER_NAME(joystickEvent,"joystickEvent");
	HX_MARK_MEMBER_NAME(keyEvent,"keyEvent");
	HX_MARK_MEMBER_NAME(mouseEvent,"mouseEvent");
	HX_MARK_MEMBER_NAME(sensorEvent,"sensorEvent");
	HX_MARK_MEMBER_NAME(textEvent,"textEvent");
	HX_MARK_MEMBER_NAME(windowEvent,"windowEvent");
	HX_MARK_MEMBER_NAME(applicationEvent,"applicationEvent");
	HX_MARK_MEMBER_NAME(renderEvent,"renderEvent");
	HX_MARK_MEMBER_NAME(clipboardEvent,"clipboardEvent");
	HX_MARK_MEMBER_NAME(dropEvent,"dropEvent");
	HX_MARK_MEMBER_NAME(gamepadEvent,"gamepadEvent");
	HX_MARK_MEMBER_NAME(analogAxisDeadZone,"analogAxisDeadZone");
	HX_MARK_MEMBER_NAME(timerID,"timerID");
	HX_MARK_MEMBER_NAME(timerActive,"timerActive");
	HX_MARK_MEMBER_NAME(firstTime,"firstTime");
	HX_MARK_END_CLASS();
}

void SDLApplication_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(gamepadsAxisMap,"gamepadsAxisMap");
	HX_VISIT_MEMBER_NAME(inBackground,"inBackground");
	HX_VISIT_MEMBER_NAME(framePeriod,"framePeriod");
	HX_VISIT_MEMBER_NAME(currentUpdate,"currentUpdate");
	HX_VISIT_MEMBER_NAME(lastUpdate,"lastUpdate");
	HX_VISIT_MEMBER_NAME(nextUpdate,"nextUpdate");
	HX_VISIT_MEMBER_NAME(joystickEvent,"joystickEvent");
	HX_VISIT_MEMBER_NAME(keyEvent,"keyEvent");
	HX_VISIT_MEMBER_NAME(mouseEvent,"mouseEvent");
	HX_VISIT_MEMBER_NAME(sensorEvent,"sensorEvent");
	HX_VISIT_MEMBER_NAME(textEvent,"textEvent");
	HX_VISIT_MEMBER_NAME(windowEvent,"windowEvent");
	HX_VISIT_MEMBER_NAME(applicationEvent,"applicationEvent");
	HX_VISIT_MEMBER_NAME(renderEvent,"renderEvent");
	HX_VISIT_MEMBER_NAME(clipboardEvent,"clipboardEvent");
	HX_VISIT_MEMBER_NAME(dropEvent,"dropEvent");
	HX_VISIT_MEMBER_NAME(gamepadEvent,"gamepadEvent");
	HX_VISIT_MEMBER_NAME(analogAxisDeadZone,"analogAxisDeadZone");
	HX_VISIT_MEMBER_NAME(timerID,"timerID");
	HX_VISIT_MEMBER_NAME(timerActive,"timerActive");
	HX_VISIT_MEMBER_NAME(firstTime,"firstTime");
}

hx::Val SDLApplication_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"exec") ) { return hx::Val( exec_dyn() ); }
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		if (HX_FIELD_EQ(inName,"quit") ) { return hx::Val( quit_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"timerID") ) { return hx::Val( timerID ); }
		if (HX_FIELD_EQ(inName,"onTimer") ) { return hx::Val( onTimer_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"keyEvent") ) { return hx::Val( keyEvent ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"textEvent") ) { return hx::Val( textEvent ); }
		if (HX_FIELD_EQ(inName,"dropEvent") ) { return hx::Val( dropEvent ); }
		if (HX_FIELD_EQ(inName,"firstTime") ) { return hx::Val( firstTime ); }
		if (HX_FIELD_EQ(inName,"waitEvent") ) { return hx::Val( waitEvent_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"lastUpdate") ) { return hx::Val( lastUpdate ); }
		if (HX_FIELD_EQ(inName,"nextUpdate") ) { return hx::Val( nextUpdate ); }
		if (HX_FIELD_EQ(inName,"mouseEvent") ) { return hx::Val( mouseEvent ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"framePeriod") ) { return hx::Val( framePeriod ); }
		if (HX_FIELD_EQ(inName,"sensorEvent") ) { return hx::Val( sensorEvent ); }
		if (HX_FIELD_EQ(inName,"windowEvent") ) { return hx::Val( windowEvent ); }
		if (HX_FIELD_EQ(inName,"renderEvent") ) { return hx::Val( renderEvent ); }
		if (HX_FIELD_EQ(inName,"handleEvent") ) { return hx::Val( handleEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"timerActive") ) { return hx::Val( timerActive ); }
		if (HX_FIELD_EQ(inName,"updateFrame") ) { return hx::Val( updateFrame_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"inBackground") ) { return hx::Val( inBackground ); }
		if (HX_FIELD_EQ(inName,"gamepadEvent") ) { return hx::Val( gamepadEvent ); }
		if (HX_FIELD_EQ(inName,"setFrameRate") ) { return hx::Val( setFrameRate_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"currentUpdate") ) { return hx::Val( currentUpdate ); }
		if (HX_FIELD_EQ(inName,"joystickEvent") ) { return hx::Val( joystickEvent ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"clipboardEvent") ) { return hx::Val( clipboardEvent ); }
		if (HX_FIELD_EQ(inName,"registerWindow") ) { return hx::Val( registerWindow_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"gamepadsAxisMap") ) { return hx::Val( gamepadsAxisMap ); }
		if (HX_FIELD_EQ(inName,"processKeyEvent") ) { return hx::Val( processKeyEvent_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"applicationEvent") ) { return hx::Val( applicationEvent ); }
		if (HX_FIELD_EQ(inName,"processTextEvent") ) { return hx::Val( processTextEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"processDropEvent") ) { return hx::Val( processDropEvent_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"processMouseEvent") ) { return hx::Val( processMouseEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"createApplication") ) { return hx::Val( createApplication_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"analogAxisDeadZone") ) { return hx::Val( analogAxisDeadZone ); }
		if (HX_FIELD_EQ(inName,"processSensorEvent") ) { return hx::Val( processSensorEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"processWindowEvent") ) { return hx::Val( processWindowEvent_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"processGamepadEvent") ) { return hx::Val( processGamepadEvent_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"processJoystickEvent") ) { return hx::Val( processJoystickEvent_dyn() ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"processClipboardEvent") ) { return hx::Val( processClipboardEvent_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool SDLApplication_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { outValue = ( active ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"callback") ) { outValue = ( callback ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"currentApplication") ) { outValue = ( currentApplication ); return true; }
	}
	return false;
}

hx::Val SDLApplication_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"timerID") ) { timerID=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"keyEvent") ) { keyEvent=inValue.Cast<  ::fiesta::ui::events::KeyEvent >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"textEvent") ) { textEvent=inValue.Cast<  ::fiesta::ui::events::TextEvent >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dropEvent") ) { dropEvent=inValue.Cast<  ::fiesta::ui::events::DropEvent >(); return inValue; }
		if (HX_FIELD_EQ(inName,"firstTime") ) { firstTime=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"lastUpdate") ) { lastUpdate=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nextUpdate") ) { nextUpdate=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mouseEvent") ) { mouseEvent=inValue.Cast<  ::fiesta::ui::events::MouseEvent >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"framePeriod") ) { framePeriod=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sensorEvent") ) { sensorEvent=inValue.Cast<  ::fiesta::ui::events::SensorEvent >(); return inValue; }
		if (HX_FIELD_EQ(inName,"windowEvent") ) { windowEvent=inValue.Cast<  ::fiesta::ui::events::WindowEvent >(); return inValue; }
		if (HX_FIELD_EQ(inName,"renderEvent") ) { renderEvent=inValue.Cast<  ::fiesta::graphics::events::RenderEvent >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timerActive") ) { timerActive=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"inBackground") ) { inBackground=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gamepadEvent") ) { gamepadEvent=inValue.Cast<  ::fiesta::ui::events::GamepadEvent >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"currentUpdate") ) { currentUpdate=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"joystickEvent") ) { joystickEvent=inValue.Cast<  ::fiesta::ui::events::JoystickEvent >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"clipboardEvent") ) { clipboardEvent=inValue.Cast<  ::fiesta::ui::events::ClipboardEvent >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"gamepadsAxisMap") ) { gamepadsAxisMap=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"applicationEvent") ) { applicationEvent=inValue.Cast<  ::fiesta::app::events::ApplicationEvent >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"analogAxisDeadZone") ) { analogAxisDeadZone=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool SDLApplication_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"active") ) { active=ioValue.Cast< bool >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"callback") ) { callback=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"currentApplication") ) { currentApplication=ioValue.Cast<  ::fiesta::native::sdl::SDLApplication >(); return true; }
	}
	return false;
}

void SDLApplication_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("gamepadsAxisMap",e9,d5,f9,f8));
	outFields->push(HX_("inBackground",33,a4,e4,73));
	outFields->push(HX_("framePeriod",0e,2d,63,19));
	outFields->push(HX_("currentUpdate",22,07,62,6a));
	outFields->push(HX_("lastUpdate",ff,68,e0,51));
	outFields->push(HX_("nextUpdate",5c,37,37,3c));
	outFields->push(HX_("joystickEvent",be,2d,4c,9f));
	outFields->push(HX_("keyEvent",fb,6d,2e,ba));
	outFields->push(HX_("mouseEvent",b5,bb,91,93));
	outFields->push(HX_("sensorEvent",80,b3,1f,bc));
	outFields->push(HX_("textEvent",2d,58,b2,0e));
	outFields->push(HX_("windowEvent",0a,5e,97,66));
	outFields->push(HX_("applicationEvent",aa,8a,34,01));
	outFields->push(HX_("renderEvent",e4,f4,75,41));
	outFields->push(HX_("clipboardEvent",64,ea,8b,57));
	outFields->push(HX_("dropEvent",6b,f5,7c,b7));
	outFields->push(HX_("gamepadEvent",b9,6f,95,2d));
	outFields->push(HX_("analogAxisDeadZone",01,cb,5c,f6));
	outFields->push(HX_("timerID",e0,3a,f9,d8));
	outFields->push(HX_("timerActive",6b,17,6e,74));
	outFields->push(HX_("firstTime",5d,48,cb,03));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo SDLApplication_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::haxe::ds::IntMap */ ,(int)offsetof(SDLApplication_obj,gamepadsAxisMap),HX_("gamepadsAxisMap",e9,d5,f9,f8)},
	{hx::fsBool,(int)offsetof(SDLApplication_obj,inBackground),HX_("inBackground",33,a4,e4,73)},
	{hx::fsFloat,(int)offsetof(SDLApplication_obj,framePeriod),HX_("framePeriod",0e,2d,63,19)},
	{hx::fsInt,(int)offsetof(SDLApplication_obj,currentUpdate),HX_("currentUpdate",22,07,62,6a)},
	{hx::fsInt,(int)offsetof(SDLApplication_obj,lastUpdate),HX_("lastUpdate",ff,68,e0,51)},
	{hx::fsInt,(int)offsetof(SDLApplication_obj,nextUpdate),HX_("nextUpdate",5c,37,37,3c)},
	{hx::fsObject /*  ::fiesta::ui::events::JoystickEvent */ ,(int)offsetof(SDLApplication_obj,joystickEvent),HX_("joystickEvent",be,2d,4c,9f)},
	{hx::fsObject /*  ::fiesta::ui::events::KeyEvent */ ,(int)offsetof(SDLApplication_obj,keyEvent),HX_("keyEvent",fb,6d,2e,ba)},
	{hx::fsObject /*  ::fiesta::ui::events::MouseEvent */ ,(int)offsetof(SDLApplication_obj,mouseEvent),HX_("mouseEvent",b5,bb,91,93)},
	{hx::fsObject /*  ::fiesta::ui::events::SensorEvent */ ,(int)offsetof(SDLApplication_obj,sensorEvent),HX_("sensorEvent",80,b3,1f,bc)},
	{hx::fsObject /*  ::fiesta::ui::events::TextEvent */ ,(int)offsetof(SDLApplication_obj,textEvent),HX_("textEvent",2d,58,b2,0e)},
	{hx::fsObject /*  ::fiesta::ui::events::WindowEvent */ ,(int)offsetof(SDLApplication_obj,windowEvent),HX_("windowEvent",0a,5e,97,66)},
	{hx::fsObject /*  ::fiesta::app::events::ApplicationEvent */ ,(int)offsetof(SDLApplication_obj,applicationEvent),HX_("applicationEvent",aa,8a,34,01)},
	{hx::fsObject /*  ::fiesta::graphics::events::RenderEvent */ ,(int)offsetof(SDLApplication_obj,renderEvent),HX_("renderEvent",e4,f4,75,41)},
	{hx::fsObject /*  ::fiesta::ui::events::ClipboardEvent */ ,(int)offsetof(SDLApplication_obj,clipboardEvent),HX_("clipboardEvent",64,ea,8b,57)},
	{hx::fsObject /*  ::fiesta::ui::events::DropEvent */ ,(int)offsetof(SDLApplication_obj,dropEvent),HX_("dropEvent",6b,f5,7c,b7)},
	{hx::fsObject /*  ::fiesta::ui::events::GamepadEvent */ ,(int)offsetof(SDLApplication_obj,gamepadEvent),HX_("gamepadEvent",b9,6f,95,2d)},
	{hx::fsInt,(int)offsetof(SDLApplication_obj,analogAxisDeadZone),HX_("analogAxisDeadZone",01,cb,5c,f6)},
	{hx::fsInt,(int)offsetof(SDLApplication_obj,timerID),HX_("timerID",e0,3a,f9,d8)},
	{hx::fsBool,(int)offsetof(SDLApplication_obj,timerActive),HX_("timerActive",6b,17,6e,74)},
	{hx::fsBool,(int)offsetof(SDLApplication_obj,firstTime),HX_("firstTime",5d,48,cb,03)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo SDLApplication_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*  ::Dynamic */ ,(void *) &SDLApplication_obj::callback,HX_("callback",c5,99,06,7f)},
	{hx::fsObject /*  ::fiesta::native::sdl::SDLApplication */ ,(void *) &SDLApplication_obj::currentApplication,HX_("currentApplication",97,8f,da,a1)},
	{hx::fsBool,(void *) &SDLApplication_obj::active,HX_("active",c6,41,46,16)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String SDLApplication_obj_sMemberFields[] = {
	HX_("gamepadsAxisMap",e9,d5,f9,f8),
	HX_("inBackground",33,a4,e4,73),
	HX_("framePeriod",0e,2d,63,19),
	HX_("currentUpdate",22,07,62,6a),
	HX_("lastUpdate",ff,68,e0,51),
	HX_("nextUpdate",5c,37,37,3c),
	HX_("joystickEvent",be,2d,4c,9f),
	HX_("keyEvent",fb,6d,2e,ba),
	HX_("mouseEvent",b5,bb,91,93),
	HX_("sensorEvent",80,b3,1f,bc),
	HX_("textEvent",2d,58,b2,0e),
	HX_("windowEvent",0a,5e,97,66),
	HX_("applicationEvent",aa,8a,34,01),
	HX_("renderEvent",e4,f4,75,41),
	HX_("clipboardEvent",64,ea,8b,57),
	HX_("dropEvent",6b,f5,7c,b7),
	HX_("gamepadEvent",b9,6f,95,2d),
	HX_("analogAxisDeadZone",01,cb,5c,f6),
	HX_("exec",91,f3,1d,43),
	HX_("handleEvent",52,73,0e,28),
	HX_("init",10,3b,bb,45),
	HX_("processJoystickEvent",cf,c1,9b,87),
	HX_("processKeyEvent",8a,53,49,1a),
	HX_("processMouseEvent",04,63,5c,5c),
	HX_("processSensorEvent",51,71,a7,a4),
	HX_("processTextEvent",be,4f,20,c6),
	HX_("processWindowEvent",db,1b,1f,4f),
	HX_("processClipboardEvent",33,e5,dd,b4),
	HX_("processDropEvent",fc,ec,ea,6e),
	HX_("processGamepadEvent",c8,c8,d3,bb),
	HX_("quit",cf,3f,0a,4b),
	HX_("registerWindow",b3,1a,ce,18),
	HX_("setFrameRate",ab,d1,74,5d),
	HX_("timerID",e0,3a,f9,d8),
	HX_("timerActive",6b,17,6e,74),
	HX_("firstTime",5d,48,cb,03),
	HX_("onTimer",26,5e,73,a6),
	HX_("update",09,86,05,87),
	HX_("updateFrame",64,e1,1b,ec),
	HX_("waitEvent",65,d5,fa,32),
	HX_("createApplication",b4,85,df,7c),
	::String(null()) };

static void SDLApplication_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SDLApplication_obj::callback,"callback");
	HX_MARK_MEMBER_NAME(SDLApplication_obj::currentApplication,"currentApplication");
	HX_MARK_MEMBER_NAME(SDLApplication_obj::active,"active");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SDLApplication_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SDLApplication_obj::callback,"callback");
	HX_VISIT_MEMBER_NAME(SDLApplication_obj::currentApplication,"currentApplication");
	HX_VISIT_MEMBER_NAME(SDLApplication_obj::active,"active");
};

#endif

hx::Class SDLApplication_obj::__mClass;

static ::String SDLApplication_obj_sStaticFields[] = {
	HX_("callback",c5,99,06,7f),
	HX_("currentApplication",97,8f,da,a1),
	HX_("active",c6,41,46,16),
	::String(null())
};

void SDLApplication_obj::__register()
{
	SDLApplication_obj _hx_dummy;
	SDLApplication_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("fiesta.native.sdl.SDLApplication",ef,8c,a2,b7);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SDLApplication_obj::__GetStatic;
	__mClass->mSetStaticField = &SDLApplication_obj::__SetStatic;
	__mClass->mMarkFunc = SDLApplication_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(SDLApplication_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SDLApplication_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SDLApplication_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SDLApplication_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SDLApplication_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SDLApplication_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace fiesta
} // end namespace native
} // end namespace sdl
