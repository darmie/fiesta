// Generated by Haxe 4.0.0-rc.2+77068e1
#include <hxcpp.h>

#ifndef INCLUDED_fiesta_ui_events_WindowEvent
#include <fiesta/ui/events/WindowEvent.h>
#endif
#ifndef INCLUDED_fiesta_ui_events_WindowEventType
#include <fiesta/ui/events/WindowEventType.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4bbafb796ddc2243_30_new,"fiesta.ui.events.WindowEvent","new",0xea006711,"fiesta.ui.events.WindowEvent.new","fiesta/ui/events/WindowEvent.hx",30,0x1b9e0aa0)
HX_LOCAL_STACK_FRAME(_hx_pos_4bbafb796ddc2243_41_dispatch,"fiesta.ui.events.WindowEvent","dispatch",0xf2825669,"fiesta.ui.events.WindowEvent.dispatch","fiesta/ui/events/WindowEvent.hx",41,0x1b9e0aa0)
namespace fiesta{
namespace ui{
namespace events{

void WindowEvent_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_4bbafb796ddc2243_30_new)
HXLINE(  31)		this->eventType = ::fiesta::ui::events::WindowEventType_obj::WINDOW_ACTIVATE_dyn();
HXLINE(  33)		this->width = 0;
HXLINE(  34)		this->height = 0;
HXLINE(  35)		this->windowID = 0;
HXLINE(  36)		this->x = 0;
HXLINE(  37)		this->y = 0;
            	}

Dynamic WindowEvent_obj::__CreateEmpty() { return new WindowEvent_obj; }

void *WindowEvent_obj::_hx_vtable = 0;

Dynamic WindowEvent_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< WindowEvent_obj > _hx_result = new WindowEvent_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool WindowEvent_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2910203f;
}

 ::fiesta::ui::events::WindowEvent WindowEvent_obj::eventObject;

 ::Dynamic WindowEvent_obj::callback;

void WindowEvent_obj::dispatch( ::fiesta::ui::events::WindowEvent event){
            	HX_GC_STACKFRAME(&_hx_pos_4bbafb796ddc2243_41_dispatch)
HXDLIN(  41)		if (hx::IsNotNull( ::fiesta::ui::events::WindowEvent_obj::callback )) {
HXLINE(  42)			::fiesta::ui::events::WindowEvent_obj::eventObject =  ::fiesta::ui::events::WindowEvent_obj::__alloc( HX_CTX );
HXLINE(  43)			::fiesta::ui::events::WindowEvent_obj::eventObject->eventType = event->eventType;
HXLINE(  44)			::fiesta::ui::events::WindowEvent_obj::eventObject->windowID = event->windowID;
HXLINE(  46)			switch((int)(event->eventType->_hx_getIndex())){
            				case (int)10: {
HXLINE(  48)					::fiesta::ui::events::WindowEvent_obj::eventObject->x = event->x;
HXLINE(  49)					::fiesta::ui::events::WindowEvent_obj::eventObject->y = event->y;
            				}
            				break;
            				case (int)11: {
HXLINE(  52)					::fiesta::ui::events::WindowEvent_obj::eventObject->width = event->width;
HXLINE(  53)					::fiesta::ui::events::WindowEvent_obj::eventObject->height = event->height;
            				}
            				break;
            				default:{
            				}
            			}
HXLINE(  58)			::fiesta::ui::events::WindowEvent_obj::callback(::fiesta::ui::events::WindowEvent_obj::eventObject);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(WindowEvent_obj,dispatch,(void))


hx::ObjectPtr< WindowEvent_obj > WindowEvent_obj::__new() {
	hx::ObjectPtr< WindowEvent_obj > __this = new WindowEvent_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< WindowEvent_obj > WindowEvent_obj::__alloc(hx::Ctx *_hx_ctx) {
	WindowEvent_obj *__this = (WindowEvent_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(WindowEvent_obj), true, "fiesta.ui.events.WindowEvent"));
	*(void **)__this = WindowEvent_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

WindowEvent_obj::WindowEvent_obj()
{
}

void WindowEvent_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(WindowEvent);
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(eventType,"eventType");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(windowID,"windowID");
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_END_CLASS();
}

void WindowEvent_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(eventType,"eventType");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(windowID,"windowID");
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
}

hx::Val WindowEvent_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"windowID") ) { return hx::Val( windowID ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"eventType") ) { return hx::Val( eventType ); }
	}
	return super::__Field(inName,inCallProp);
}

bool WindowEvent_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"callback") ) { outValue = ( callback ); return true; }
		if (HX_FIELD_EQ(inName,"dispatch") ) { outValue = dispatch_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"eventObject") ) { outValue = ( eventObject ); return true; }
	}
	return false;
}

hx::Val WindowEvent_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"windowID") ) { windowID=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"eventType") ) { eventType=inValue.Cast<  ::fiesta::ui::events::WindowEventType >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool WindowEvent_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"callback") ) { callback=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"eventObject") ) { eventObject=ioValue.Cast<  ::fiesta::ui::events::WindowEvent >(); return true; }
	}
	return false;
}

void WindowEvent_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("eventType",f4,fb,15,fc));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("windowID",cb,af,cd,7d));
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo WindowEvent_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(WindowEvent_obj,height),HX_("height",e7,07,4c,02)},
	{hx::fsObject /*  ::fiesta::ui::events::WindowEventType */ ,(int)offsetof(WindowEvent_obj,eventType),HX_("eventType",f4,fb,15,fc)},
	{hx::fsInt,(int)offsetof(WindowEvent_obj,width),HX_("width",06,b6,62,ca)},
	{hx::fsInt,(int)offsetof(WindowEvent_obj,windowID),HX_("windowID",cb,af,cd,7d)},
	{hx::fsInt,(int)offsetof(WindowEvent_obj,x),HX_("x",78,00,00,00)},
	{hx::fsInt,(int)offsetof(WindowEvent_obj,y),HX_("y",79,00,00,00)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo WindowEvent_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*  ::fiesta::ui::events::WindowEvent */ ,(void *) &WindowEvent_obj::eventObject,HX_("eventObject",79,ca,8c,68)},
	{hx::fsObject /*  ::Dynamic */ ,(void *) &WindowEvent_obj::callback,HX_("callback",c5,99,06,7f)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String WindowEvent_obj_sMemberFields[] = {
	HX_("height",e7,07,4c,02),
	HX_("eventType",f4,fb,15,fc),
	HX_("width",06,b6,62,ca),
	HX_("windowID",cb,af,cd,7d),
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	::String(null()) };

static void WindowEvent_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(WindowEvent_obj::eventObject,"eventObject");
	HX_MARK_MEMBER_NAME(WindowEvent_obj::callback,"callback");
};

#ifdef HXCPP_VISIT_ALLOCS
static void WindowEvent_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(WindowEvent_obj::eventObject,"eventObject");
	HX_VISIT_MEMBER_NAME(WindowEvent_obj::callback,"callback");
};

#endif

hx::Class WindowEvent_obj::__mClass;

static ::String WindowEvent_obj_sStaticFields[] = {
	HX_("eventObject",79,ca,8c,68),
	HX_("callback",c5,99,06,7f),
	HX_("dispatch",ba,ce,63,1e),
	::String(null())
};

void WindowEvent_obj::__register()
{
	WindowEvent_obj _hx_dummy;
	WindowEvent_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("fiesta.ui.events.WindowEvent",9f,8a,01,5e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &WindowEvent_obj::__GetStatic;
	__mClass->mSetStaticField = &WindowEvent_obj::__SetStatic;
	__mClass->mMarkFunc = WindowEvent_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(WindowEvent_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(WindowEvent_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< WindowEvent_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = WindowEvent_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = WindowEvent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = WindowEvent_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace fiesta
} // end namespace ui
} // end namespace events
