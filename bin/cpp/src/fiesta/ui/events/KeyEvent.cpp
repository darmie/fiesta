// Generated by Haxe 4.0.0-rc.2+77068e1
#include <hxcpp.h>

#ifndef INCLUDED_fiesta_ui_events_KeyEvent
#include <fiesta/ui/events/KeyEvent.h>
#endif
#ifndef INCLUDED_fiesta_ui_events_KeyEventType
#include <fiesta/ui/events/KeyEventType.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5c741402d0f4fc35_19_new,"fiesta.ui.events.KeyEvent","new",0x4034fe38,"fiesta.ui.events.KeyEvent.new","fiesta/ui/events/KeyEvent.hx",19,0x8b647c77)
HX_LOCAL_STACK_FRAME(_hx_pos_5c741402d0f4fc35_27_dispatch,"fiesta.ui.events.KeyEvent","dispatch",0x1b3571e2,"fiesta.ui.events.KeyEvent.dispatch","fiesta/ui/events/KeyEvent.hx",27,0x8b647c77)
namespace fiesta{
namespace ui{
namespace events{

void KeyEvent_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_5c741402d0f4fc35_19_new)
HXLINE(  20)		this->keyCode = 0;
HXLINE(  21)		this->modifier = 0;
HXLINE(  22)		this->eventType = ::fiesta::ui::events::KeyEventType_obj::KEY_DOWN_dyn();
HXLINE(  23)		this->windowID = 0;
            	}

Dynamic KeyEvent_obj::__CreateEmpty() { return new KeyEvent_obj; }

void *KeyEvent_obj::_hx_vtable = 0;

Dynamic KeyEvent_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< KeyEvent_obj > _hx_result = new KeyEvent_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool KeyEvent_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0330770a;
}

 ::Dynamic KeyEvent_obj::callback;

 ::fiesta::ui::events::KeyEvent KeyEvent_obj::eventObject;

void KeyEvent_obj::dispatch( ::fiesta::ui::events::KeyEvent event){
            	HX_STACKFRAME(&_hx_pos_5c741402d0f4fc35_27_dispatch)
HXDLIN(  27)		if (hx::IsNotNull( ::fiesta::ui::events::KeyEvent_obj::callback )) {
HXLINE(  28)			::fiesta::ui::events::KeyEvent_obj::eventObject = event;
HXLINE(  29)			::fiesta::ui::events::KeyEvent_obj::callback(::fiesta::ui::events::KeyEvent_obj::eventObject);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(KeyEvent_obj,dispatch,(void))


hx::ObjectPtr< KeyEvent_obj > KeyEvent_obj::__new() {
	hx::ObjectPtr< KeyEvent_obj > __this = new KeyEvent_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< KeyEvent_obj > KeyEvent_obj::__alloc(hx::Ctx *_hx_ctx) {
	KeyEvent_obj *__this = (KeyEvent_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(KeyEvent_obj), true, "fiesta.ui.events.KeyEvent"));
	*(void **)__this = KeyEvent_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

KeyEvent_obj::KeyEvent_obj()
{
}

void KeyEvent_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(KeyEvent);
	HX_MARK_MEMBER_NAME(keyCode,"keyCode");
	HX_MARK_MEMBER_NAME(modifier,"modifier");
	HX_MARK_MEMBER_NAME(eventType,"eventType");
	HX_MARK_MEMBER_NAME(windowID,"windowID");
	HX_MARK_END_CLASS();
}

void KeyEvent_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(keyCode,"keyCode");
	HX_VISIT_MEMBER_NAME(modifier,"modifier");
	HX_VISIT_MEMBER_NAME(eventType,"eventType");
	HX_VISIT_MEMBER_NAME(windowID,"windowID");
}

hx::Val KeyEvent_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"keyCode") ) { return hx::Val( keyCode ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modifier") ) { return hx::Val( modifier ); }
		if (HX_FIELD_EQ(inName,"windowID") ) { return hx::Val( windowID ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"eventType") ) { return hx::Val( eventType ); }
	}
	return super::__Field(inName,inCallProp);
}

bool KeyEvent_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"callback") ) { outValue = ( callback ); return true; }
		if (HX_FIELD_EQ(inName,"dispatch") ) { outValue = dispatch_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"eventObject") ) { outValue = ( eventObject ); return true; }
	}
	return false;
}

hx::Val KeyEvent_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"keyCode") ) { keyCode=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"modifier") ) { modifier=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"windowID") ) { windowID=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"eventType") ) { eventType=inValue.Cast<  ::fiesta::ui::events::KeyEventType >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool KeyEvent_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"callback") ) { callback=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"eventObject") ) { eventObject=ioValue.Cast<  ::fiesta::ui::events::KeyEvent >(); return true; }
	}
	return false;
}

void KeyEvent_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("keyCode",6c,22,9e,9b));
	outFields->push(HX_("modifier",57,db,c7,16));
	outFields->push(HX_("eventType",f4,fb,15,fc));
	outFields->push(HX_("windowID",cb,af,cd,7d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo KeyEvent_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(KeyEvent_obj,keyCode),HX_("keyCode",6c,22,9e,9b)},
	{hx::fsInt,(int)offsetof(KeyEvent_obj,modifier),HX_("modifier",57,db,c7,16)},
	{hx::fsObject /*  ::fiesta::ui::events::KeyEventType */ ,(int)offsetof(KeyEvent_obj,eventType),HX_("eventType",f4,fb,15,fc)},
	{hx::fsInt,(int)offsetof(KeyEvent_obj,windowID),HX_("windowID",cb,af,cd,7d)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo KeyEvent_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*  ::Dynamic */ ,(void *) &KeyEvent_obj::callback,HX_("callback",c5,99,06,7f)},
	{hx::fsObject /*  ::fiesta::ui::events::KeyEvent */ ,(void *) &KeyEvent_obj::eventObject,HX_("eventObject",79,ca,8c,68)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String KeyEvent_obj_sMemberFields[] = {
	HX_("keyCode",6c,22,9e,9b),
	HX_("modifier",57,db,c7,16),
	HX_("eventType",f4,fb,15,fc),
	HX_("windowID",cb,af,cd,7d),
	::String(null()) };

static void KeyEvent_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(KeyEvent_obj::callback,"callback");
	HX_MARK_MEMBER_NAME(KeyEvent_obj::eventObject,"eventObject");
};

#ifdef HXCPP_VISIT_ALLOCS
static void KeyEvent_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(KeyEvent_obj::callback,"callback");
	HX_VISIT_MEMBER_NAME(KeyEvent_obj::eventObject,"eventObject");
};

#endif

hx::Class KeyEvent_obj::__mClass;

static ::String KeyEvent_obj_sStaticFields[] = {
	HX_("callback",c5,99,06,7f),
	HX_("eventObject",79,ca,8c,68),
	HX_("dispatch",ba,ce,63,1e),
	::String(null())
};

void KeyEvent_obj::__register()
{
	KeyEvent_obj _hx_dummy;
	KeyEvent_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("fiesta.ui.events.KeyEvent",46,c2,63,29);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &KeyEvent_obj::__GetStatic;
	__mClass->mSetStaticField = &KeyEvent_obj::__SetStatic;
	__mClass->mMarkFunc = KeyEvent_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(KeyEvent_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(KeyEvent_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< KeyEvent_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = KeyEvent_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = KeyEvent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = KeyEvent_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace fiesta
} // end namespace ui
} // end namespace events
