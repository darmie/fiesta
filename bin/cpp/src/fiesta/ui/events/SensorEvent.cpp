// Generated by Haxe 4.0.0-rc.2+77068e1
#include <hxcpp.h>

#ifndef INCLUDED_fiesta_ui_events_SensorEvent
#include <fiesta/ui/events/SensorEvent.h>
#endif
#ifndef INCLUDED_fiesta_ui_events_SensorEventType
#include <fiesta/ui/events/SensorEventType.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_672b78446fb94660_17_new,"fiesta.ui.events.SensorEvent","new",0xa41faf87,"fiesta.ui.events.SensorEvent.new","fiesta/ui/events/SensorEvent.hx",17,0x683802ea)
HX_LOCAL_STACK_FRAME(_hx_pos_672b78446fb94660_27_dispatch,"fiesta.ui.events.SensorEvent","dispatch",0x081aa233,"fiesta.ui.events.SensorEvent.dispatch","fiesta/ui/events/SensorEvent.hx",27,0x683802ea)
namespace fiesta{
namespace ui{
namespace events{

void SensorEvent_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_672b78446fb94660_17_new)
HXLINE(  18)		this->eventType = ::fiesta::ui::events::SensorEventType_obj::SENSOR_ACCELEROMETER_dyn();
HXLINE(  19)		this->id = 0;
HXLINE(  20)		this->x = ( (Float)(0) );
HXLINE(  21)		this->y = ( (Float)(0) );
HXLINE(  22)		this->z = ( (Float)(0) );
            	}

Dynamic SensorEvent_obj::__CreateEmpty() { return new SensorEvent_obj; }

void *SensorEvent_obj::_hx_vtable = 0;

Dynamic SensorEvent_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SensorEvent_obj > _hx_result = new SensorEvent_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool SensorEvent_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7e9875b5;
}

 ::fiesta::ui::events::SensorEvent SensorEvent_obj::eventObject;

 ::Dynamic SensorEvent_obj::callback;

void SensorEvent_obj::dispatch( ::fiesta::ui::events::SensorEvent event){
            	HX_STACKFRAME(&_hx_pos_672b78446fb94660_27_dispatch)
HXDLIN(  27)		if (hx::IsNotNull( ::fiesta::ui::events::SensorEvent_obj::callback )) {
HXLINE(  28)			::fiesta::ui::events::SensorEvent_obj::eventObject = event;
HXLINE(  29)			::fiesta::ui::events::SensorEvent_obj::callback(event);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SensorEvent_obj,dispatch,(void))


hx::ObjectPtr< SensorEvent_obj > SensorEvent_obj::__new() {
	hx::ObjectPtr< SensorEvent_obj > __this = new SensorEvent_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< SensorEvent_obj > SensorEvent_obj::__alloc(hx::Ctx *_hx_ctx) {
	SensorEvent_obj *__this = (SensorEvent_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SensorEvent_obj), true, "fiesta.ui.events.SensorEvent"));
	*(void **)__this = SensorEvent_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

SensorEvent_obj::SensorEvent_obj()
{
}

void SensorEvent_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SensorEvent);
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(z,"z");
	HX_MARK_MEMBER_NAME(id,"id");
	HX_MARK_MEMBER_NAME(eventType,"eventType");
	HX_MARK_END_CLASS();
}

void SensorEvent_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(z,"z");
	HX_VISIT_MEMBER_NAME(id,"id");
	HX_VISIT_MEMBER_NAME(eventType,"eventType");
}

hx::Val SensorEvent_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return hx::Val( y ); }
		if (HX_FIELD_EQ(inName,"z") ) { return hx::Val( z ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { return hx::Val( id ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"eventType") ) { return hx::Val( eventType ); }
	}
	return super::__Field(inName,inCallProp);
}

bool SensorEvent_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"callback") ) { outValue = ( callback ); return true; }
		if (HX_FIELD_EQ(inName,"dispatch") ) { outValue = dispatch_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"eventObject") ) { outValue = ( eventObject ); return true; }
	}
	return false;
}

hx::Val SensorEvent_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"z") ) { z=inValue.Cast< Float >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"eventType") ) { eventType=inValue.Cast<  ::fiesta::ui::events::SensorEventType >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool SensorEvent_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"callback") ) { callback=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"eventObject") ) { eventObject=ioValue.Cast<  ::fiesta::ui::events::SensorEvent >(); return true; }
	}
	return false;
}

void SensorEvent_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	outFields->push(HX_("z",7a,00,00,00));
	outFields->push(HX_("id",db,5b,00,00));
	outFields->push(HX_("eventType",f4,fb,15,fc));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo SensorEvent_obj_sMemberStorageInfo[] = {
	{hx::fsFloat,(int)offsetof(SensorEvent_obj,x),HX_("x",78,00,00,00)},
	{hx::fsFloat,(int)offsetof(SensorEvent_obj,y),HX_("y",79,00,00,00)},
	{hx::fsFloat,(int)offsetof(SensorEvent_obj,z),HX_("z",7a,00,00,00)},
	{hx::fsInt,(int)offsetof(SensorEvent_obj,id),HX_("id",db,5b,00,00)},
	{hx::fsObject /*  ::fiesta::ui::events::SensorEventType */ ,(int)offsetof(SensorEvent_obj,eventType),HX_("eventType",f4,fb,15,fc)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo SensorEvent_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*  ::fiesta::ui::events::SensorEvent */ ,(void *) &SensorEvent_obj::eventObject,HX_("eventObject",79,ca,8c,68)},
	{hx::fsObject /*  ::Dynamic */ ,(void *) &SensorEvent_obj::callback,HX_("callback",c5,99,06,7f)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String SensorEvent_obj_sMemberFields[] = {
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("z",7a,00,00,00),
	HX_("id",db,5b,00,00),
	HX_("eventType",f4,fb,15,fc),
	::String(null()) };

static void SensorEvent_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SensorEvent_obj::eventObject,"eventObject");
	HX_MARK_MEMBER_NAME(SensorEvent_obj::callback,"callback");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SensorEvent_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SensorEvent_obj::eventObject,"eventObject");
	HX_VISIT_MEMBER_NAME(SensorEvent_obj::callback,"callback");
};

#endif

hx::Class SensorEvent_obj::__mClass;

static ::String SensorEvent_obj_sStaticFields[] = {
	HX_("eventObject",79,ca,8c,68),
	HX_("callback",c5,99,06,7f),
	HX_("dispatch",ba,ce,63,1e),
	::String(null())
};

void SensorEvent_obj::__register()
{
	SensorEvent_obj _hx_dummy;
	SensorEvent_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("fiesta.ui.events.SensorEvent",15,e0,89,b3);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SensorEvent_obj::__GetStatic;
	__mClass->mSetStaticField = &SensorEvent_obj::__SetStatic;
	__mClass->mMarkFunc = SensorEvent_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(SensorEvent_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SensorEvent_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SensorEvent_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SensorEvent_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SensorEvent_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SensorEvent_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace fiesta
} // end namespace ui
} // end namespace events
