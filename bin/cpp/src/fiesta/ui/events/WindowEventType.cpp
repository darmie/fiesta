// Generated by Haxe 4.0.0-rc.2+77068e1
#include <hxcpp.h>

#ifndef INCLUDED_fiesta_ui_events_WindowEventType
#include <fiesta/ui/events/WindowEventType.h>
#endif
namespace fiesta{
namespace ui{
namespace events{

::fiesta::ui::events::WindowEventType WindowEventType_obj::WINDOW_ACTIVATE;

::fiesta::ui::events::WindowEventType WindowEventType_obj::WINDOW_CLOSE;

::fiesta::ui::events::WindowEventType WindowEventType_obj::WINDOW_DEACTIVATE;

::fiesta::ui::events::WindowEventType WindowEventType_obj::WINDOW_ENTER;

::fiesta::ui::events::WindowEventType WindowEventType_obj::WINDOW_EXPOSE;

::fiesta::ui::events::WindowEventType WindowEventType_obj::WINDOW_FOCUS_IN;

::fiesta::ui::events::WindowEventType WindowEventType_obj::WINDOW_FOCUS_OUT;

::fiesta::ui::events::WindowEventType WindowEventType_obj::WINDOW_LEAVE;

::fiesta::ui::events::WindowEventType WindowEventType_obj::WINDOW_MAXIMIZE;

::fiesta::ui::events::WindowEventType WindowEventType_obj::WINDOW_MINIMIZE;

::fiesta::ui::events::WindowEventType WindowEventType_obj::WINDOW_MOVE;

::fiesta::ui::events::WindowEventType WindowEventType_obj::WINDOW_RESIZE;

::fiesta::ui::events::WindowEventType WindowEventType_obj::WINDOW_RESTORE;

bool WindowEventType_obj::__GetStatic(const ::String &inName, ::Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	if (inName==HX_("WINDOW_ACTIVATE",22,e5,28,81)) { outValue = WindowEventType_obj::WINDOW_ACTIVATE; return true; }
	if (inName==HX_("WINDOW_CLOSE",c9,6a,e0,40)) { outValue = WindowEventType_obj::WINDOW_CLOSE; return true; }
	if (inName==HX_("WINDOW_DEACTIVATE",63,83,56,47)) { outValue = WindowEventType_obj::WINDOW_DEACTIVATE; return true; }
	if (inName==HX_("WINDOW_ENTER",29,c0,03,69)) { outValue = WindowEventType_obj::WINDOW_ENTER; return true; }
	if (inName==HX_("WINDOW_EXPOSE",f3,ed,a8,39)) { outValue = WindowEventType_obj::WINDOW_EXPOSE; return true; }
	if (inName==HX_("WINDOW_FOCUS_IN",bb,9a,ff,ac)) { outValue = WindowEventType_obj::WINDOW_FOCUS_IN; return true; }
	if (inName==HX_("WINDOW_FOCUS_OUT",d8,5c,ac,b2)) { outValue = WindowEventType_obj::WINDOW_FOCUS_OUT; return true; }
	if (inName==HX_("WINDOW_LEAVE",08,88,d0,6a)) { outValue = WindowEventType_obj::WINDOW_LEAVE; return true; }
	if (inName==HX_("WINDOW_MAXIMIZE",3b,ee,db,6f)) { outValue = WindowEventType_obj::WINDOW_MAXIMIZE; return true; }
	if (inName==HX_("WINDOW_MINIMIZE",8d,08,f6,bc)) { outValue = WindowEventType_obj::WINDOW_MINIMIZE; return true; }
	if (inName==HX_("WINDOW_MOVE",00,c1,25,9c)) { outValue = WindowEventType_obj::WINDOW_MOVE; return true; }
	if (inName==HX_("WINDOW_RESIZE",a3,b5,a6,7d)) { outValue = WindowEventType_obj::WINDOW_RESIZE; return true; }
	if (inName==HX_("WINDOW_RESTORE",9f,44,75,7b)) { outValue = WindowEventType_obj::WINDOW_RESTORE; return true; }
	return super::__GetStatic(inName, outValue, inCallProp);
}

HX_DEFINE_CREATE_ENUM(WindowEventType_obj)

int WindowEventType_obj::__FindIndex(::String inName)
{
	if (inName==HX_("WINDOW_ACTIVATE",22,e5,28,81)) return 0;
	if (inName==HX_("WINDOW_CLOSE",c9,6a,e0,40)) return 1;
	if (inName==HX_("WINDOW_DEACTIVATE",63,83,56,47)) return 2;
	if (inName==HX_("WINDOW_ENTER",29,c0,03,69)) return 3;
	if (inName==HX_("WINDOW_EXPOSE",f3,ed,a8,39)) return 4;
	if (inName==HX_("WINDOW_FOCUS_IN",bb,9a,ff,ac)) return 5;
	if (inName==HX_("WINDOW_FOCUS_OUT",d8,5c,ac,b2)) return 6;
	if (inName==HX_("WINDOW_LEAVE",08,88,d0,6a)) return 7;
	if (inName==HX_("WINDOW_MAXIMIZE",3b,ee,db,6f)) return 8;
	if (inName==HX_("WINDOW_MINIMIZE",8d,08,f6,bc)) return 9;
	if (inName==HX_("WINDOW_MOVE",00,c1,25,9c)) return 10;
	if (inName==HX_("WINDOW_RESIZE",a3,b5,a6,7d)) return 11;
	if (inName==HX_("WINDOW_RESTORE",9f,44,75,7b)) return 12;
	return super::__FindIndex(inName);
}

int WindowEventType_obj::__FindArgCount(::String inName)
{
	if (inName==HX_("WINDOW_ACTIVATE",22,e5,28,81)) return 0;
	if (inName==HX_("WINDOW_CLOSE",c9,6a,e0,40)) return 0;
	if (inName==HX_("WINDOW_DEACTIVATE",63,83,56,47)) return 0;
	if (inName==HX_("WINDOW_ENTER",29,c0,03,69)) return 0;
	if (inName==HX_("WINDOW_EXPOSE",f3,ed,a8,39)) return 0;
	if (inName==HX_("WINDOW_FOCUS_IN",bb,9a,ff,ac)) return 0;
	if (inName==HX_("WINDOW_FOCUS_OUT",d8,5c,ac,b2)) return 0;
	if (inName==HX_("WINDOW_LEAVE",08,88,d0,6a)) return 0;
	if (inName==HX_("WINDOW_MAXIMIZE",3b,ee,db,6f)) return 0;
	if (inName==HX_("WINDOW_MINIMIZE",8d,08,f6,bc)) return 0;
	if (inName==HX_("WINDOW_MOVE",00,c1,25,9c)) return 0;
	if (inName==HX_("WINDOW_RESIZE",a3,b5,a6,7d)) return 0;
	if (inName==HX_("WINDOW_RESTORE",9f,44,75,7b)) return 0;
	return super::__FindArgCount(inName);
}

hx::Val WindowEventType_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	if (inName==HX_("WINDOW_ACTIVATE",22,e5,28,81)) return WINDOW_ACTIVATE;
	if (inName==HX_("WINDOW_CLOSE",c9,6a,e0,40)) return WINDOW_CLOSE;
	if (inName==HX_("WINDOW_DEACTIVATE",63,83,56,47)) return WINDOW_DEACTIVATE;
	if (inName==HX_("WINDOW_ENTER",29,c0,03,69)) return WINDOW_ENTER;
	if (inName==HX_("WINDOW_EXPOSE",f3,ed,a8,39)) return WINDOW_EXPOSE;
	if (inName==HX_("WINDOW_FOCUS_IN",bb,9a,ff,ac)) return WINDOW_FOCUS_IN;
	if (inName==HX_("WINDOW_FOCUS_OUT",d8,5c,ac,b2)) return WINDOW_FOCUS_OUT;
	if (inName==HX_("WINDOW_LEAVE",08,88,d0,6a)) return WINDOW_LEAVE;
	if (inName==HX_("WINDOW_MAXIMIZE",3b,ee,db,6f)) return WINDOW_MAXIMIZE;
	if (inName==HX_("WINDOW_MINIMIZE",8d,08,f6,bc)) return WINDOW_MINIMIZE;
	if (inName==HX_("WINDOW_MOVE",00,c1,25,9c)) return WINDOW_MOVE;
	if (inName==HX_("WINDOW_RESIZE",a3,b5,a6,7d)) return WINDOW_RESIZE;
	if (inName==HX_("WINDOW_RESTORE",9f,44,75,7b)) return WINDOW_RESTORE;
	return super::__Field(inName,inCallProp);
}

static ::String WindowEventType_obj_sStaticFields[] = {
	HX_("WINDOW_ACTIVATE",22,e5,28,81),
	HX_("WINDOW_CLOSE",c9,6a,e0,40),
	HX_("WINDOW_DEACTIVATE",63,83,56,47),
	HX_("WINDOW_ENTER",29,c0,03,69),
	HX_("WINDOW_EXPOSE",f3,ed,a8,39),
	HX_("WINDOW_FOCUS_IN",bb,9a,ff,ac),
	HX_("WINDOW_FOCUS_OUT",d8,5c,ac,b2),
	HX_("WINDOW_LEAVE",08,88,d0,6a),
	HX_("WINDOW_MAXIMIZE",3b,ee,db,6f),
	HX_("WINDOW_MINIMIZE",8d,08,f6,bc),
	HX_("WINDOW_MOVE",00,c1,25,9c),
	HX_("WINDOW_RESIZE",a3,b5,a6,7d),
	HX_("WINDOW_RESTORE",9f,44,75,7b),
	::String(null())
};

hx::Class WindowEventType_obj::__mClass;

Dynamic __Create_WindowEventType_obj() { return new WindowEventType_obj; }

void WindowEventType_obj::__register()
{

hx::Static(__mClass) = hx::_hx_RegisterClass(HX_("fiesta.ui.events.WindowEventType",f9,e4,26,03), hx::TCanCast< WindowEventType_obj >,WindowEventType_obj_sStaticFields,0,
	&__Create_WindowEventType_obj, &__Create,
	&super::__SGetClass(), &CreateWindowEventType_obj, 0
#ifdef HXCPP_VISIT_ALLOCS
    , 0
#endif
#ifdef HXCPP_SCRIPTABLE
    , 0
#endif
);
	__mClass->mGetStaticField = &WindowEventType_obj::__GetStatic;
}

void WindowEventType_obj::__boot()
{
WINDOW_ACTIVATE = hx::CreateConstEnum< WindowEventType_obj >(HX_("WINDOW_ACTIVATE",22,e5,28,81),0);
WINDOW_CLOSE = hx::CreateConstEnum< WindowEventType_obj >(HX_("WINDOW_CLOSE",c9,6a,e0,40),1);
WINDOW_DEACTIVATE = hx::CreateConstEnum< WindowEventType_obj >(HX_("WINDOW_DEACTIVATE",63,83,56,47),2);
WINDOW_ENTER = hx::CreateConstEnum< WindowEventType_obj >(HX_("WINDOW_ENTER",29,c0,03,69),3);
WINDOW_EXPOSE = hx::CreateConstEnum< WindowEventType_obj >(HX_("WINDOW_EXPOSE",f3,ed,a8,39),4);
WINDOW_FOCUS_IN = hx::CreateConstEnum< WindowEventType_obj >(HX_("WINDOW_FOCUS_IN",bb,9a,ff,ac),5);
WINDOW_FOCUS_OUT = hx::CreateConstEnum< WindowEventType_obj >(HX_("WINDOW_FOCUS_OUT",d8,5c,ac,b2),6);
WINDOW_LEAVE = hx::CreateConstEnum< WindowEventType_obj >(HX_("WINDOW_LEAVE",08,88,d0,6a),7);
WINDOW_MAXIMIZE = hx::CreateConstEnum< WindowEventType_obj >(HX_("WINDOW_MAXIMIZE",3b,ee,db,6f),8);
WINDOW_MINIMIZE = hx::CreateConstEnum< WindowEventType_obj >(HX_("WINDOW_MINIMIZE",8d,08,f6,bc),9);
WINDOW_MOVE = hx::CreateConstEnum< WindowEventType_obj >(HX_("WINDOW_MOVE",00,c1,25,9c),10);
WINDOW_RESIZE = hx::CreateConstEnum< WindowEventType_obj >(HX_("WINDOW_RESIZE",a3,b5,a6,7d),11);
WINDOW_RESTORE = hx::CreateConstEnum< WindowEventType_obj >(HX_("WINDOW_RESTORE",9f,44,75,7b),12);
}


} // end namespace fiesta
} // end namespace ui
} // end namespace events
