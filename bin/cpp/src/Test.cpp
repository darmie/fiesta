// Generated by Haxe 4.0.0-rc.2+77068e1
#include <hxcpp.h>

#ifndef INCLUDED_Test
#include <Test.h>
#endif
#ifndef INCLUDED_fiesta_native_sdl_SDLApplication
#include <fiesta/native/sdl/SDLApplication.h>
#endif
#ifndef INCLUDED_fiesta_ui_events_KeyEvent
#include <fiesta/ui/events/KeyEvent.h>
#endif
#ifndef INCLUDED_fiesta_ui_events_KeyEventType
#include <fiesta/ui/events/KeyEventType.h>
#endif
#ifndef INCLUDED_fiesta_ui_events_MouseEvent
#include <fiesta/ui/events/MouseEvent.h>
#endif
#ifndef INCLUDED_fiesta_ui_events_MouseEventType
#include <fiesta/ui/events/MouseEventType.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_df13cafffbed243f_9_main,"Test","main",0x9c6c95b5,"Test.main","Test.hx",9,0x8afb218c)
HX_LOCAL_STACK_FRAME(_hx_pos_df13cafffbed243f_12_main,"Test","main",0x9c6c95b5,"Test.main","Test.hx",12,0x8afb218c)
HX_LOCAL_STACK_FRAME(_hx_pos_df13cafffbed243f_7_main,"Test","main",0x9c6c95b5,"Test.main","Test.hx",7,0x8afb218c)

void Test_obj::__construct() { }

Dynamic Test_obj::__CreateEmpty() { return new Test_obj; }

void *Test_obj::_hx_vtable = 0;

Dynamic Test_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Test_obj > _hx_result = new Test_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Test_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x37d2f472;
}

void Test_obj::main(){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run( ::fiesta::ui::events::KeyEvent event){
            			HX_STACKFRAME(&_hx_pos_df13cafffbed243f_9_main)
HXLINE(   9)			::haxe::Log_obj::trace(event->eventType,hx::SourceInfo(HX_("test/Test.hx",8f,7f,93,a4),9,HX_("Test",72,f4,d2,37),HX_("main",39,38,56,48)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		void _hx_run( ::fiesta::ui::events::MouseEvent event1){
            			HX_STACKFRAME(&_hx_pos_df13cafffbed243f_12_main)
HXLINE(  12)			::haxe::Log_obj::trace(event1->eventType,hx::SourceInfo(HX_("test/Test.hx",8f,7f,93,a4),12,HX_("Test",72,f4,d2,37),HX_("main",39,38,56,48)));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_df13cafffbed243f_7_main)
HXLINE(   8)		::fiesta::ui::events::KeyEvent_obj::callback =  ::Dynamic(new _hx_Closure_0());
HXLINE(  11)		::fiesta::ui::events::MouseEvent_obj::callback =  ::Dynamic(new _hx_Closure_1());
HXLINE(  14)		 ::fiesta::native::sdl::SDLApplication app =  ::fiesta::native::sdl::SDLApplication_obj::__alloc( HX_CTX );
HXLINE(  16)		app->exec();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Test_obj,main,(void))


Test_obj::Test_obj()
{
}

bool Test_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Test_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Test_obj_sStaticStorageInfo = 0;
#endif

hx::Class Test_obj::__mClass;

static ::String Test_obj_sStaticFields[] = {
	HX_("main",39,38,56,48),
	::String(null())
};

void Test_obj::__register()
{
	Test_obj _hx_dummy;
	Test_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("Test",72,f4,d2,37);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Test_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Test_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Test_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Test_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Test_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

